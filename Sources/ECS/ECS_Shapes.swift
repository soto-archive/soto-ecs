// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ECS {
    //MARK: Enums

    public enum AgentUpdateStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case staging = "STAGING"
        case staged = "STAGED"
        case updating = "UPDATING"
        case updated = "UPDATED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum AssignPublicIp: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum CapacityProviderField: String, CustomStringConvertible, Codable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum CapacityProviderStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum ClusterField: String, CustomStringConvertible, Codable {
        case attachments = "ATTACHMENTS"
        case settings = "SETTINGS"
        case statistics = "STATISTICS"
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum ClusterSettingName: String, CustomStringConvertible, Codable {
        case containerinsights = "containerInsights"
        public var description: String { return self.rawValue }
    }

    public enum Compatibility: String, CustomStringConvertible, Codable {
        case ec2 = "EC2"
        case fargate = "FARGATE"
        public var description: String { return self.rawValue }
    }

    public enum Connectivity: String, CustomStringConvertible, Codable {
        case connected = "CONNECTED"
        case disconnected = "DISCONNECTED"
        public var description: String { return self.rawValue }
    }

    public enum ContainerCondition: String, CustomStringConvertible, Codable {
        case start = "START"
        case complete = "COMPLETE"
        case success = "SUCCESS"
        case healthy = "HEALTHY"
        public var description: String { return self.rawValue }
    }

    public enum ContainerInstanceField: String, CustomStringConvertible, Codable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum ContainerInstanceStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case draining = "DRAINING"
        case registering = "REGISTERING"
        case deregistering = "DEREGISTERING"
        case registrationFailed = "REGISTRATION_FAILED"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentControllerType: String, CustomStringConvertible, Codable {
        case ecs = "ECS"
        case codeDeploy = "CODE_DEPLOY"
        case external = "EXTERNAL"
        public var description: String { return self.rawValue }
    }

    public enum DesiredStatus: String, CustomStringConvertible, Codable {
        case running = "RUNNING"
        case pending = "PENDING"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public enum DeviceCgroupPermission: String, CustomStringConvertible, Codable {
        case read = "read"
        case write = "write"
        case mknod = "mknod"
        public var description: String { return self.rawValue }
    }

    public enum EFSAuthorizationConfigIAM: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum EFSTransitEncryption: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum FirelensConfigurationType: String, CustomStringConvertible, Codable {
        case fluentd = "fluentd"
        case fluentbit = "fluentbit"
        public var description: String { return self.rawValue }
    }

    public enum HealthStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum IpcMode: String, CustomStringConvertible, Codable {
        case host = "host"
        case task = "task"
        case none = "none"
        public var description: String { return self.rawValue }
    }

    public enum LaunchType: String, CustomStringConvertible, Codable {
        case ec2 = "EC2"
        case fargate = "FARGATE"
        public var description: String { return self.rawValue }
    }

    public enum LogDriver: String, CustomStringConvertible, Codable {
        case jsonFile = "json-file"
        case syslog = "syslog"
        case journald = "journald"
        case gelf = "gelf"
        case fluentd = "fluentd"
        case awslogs = "awslogs"
        case splunk = "splunk"
        case awsfirelens = "awsfirelens"
        public var description: String { return self.rawValue }
    }

    public enum ManagedScalingStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum ManagedTerminationProtection: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum NetworkMode: String, CustomStringConvertible, Codable {
        case bridge = "bridge"
        case host = "host"
        case awsvpc = "awsvpc"
        case none = "none"
        public var description: String { return self.rawValue }
    }

    public enum PidMode: String, CustomStringConvertible, Codable {
        case host = "host"
        case task = "task"
        public var description: String { return self.rawValue }
    }

    public enum PlacementConstraintType: String, CustomStringConvertible, Codable {
        case distinctinstance = "distinctInstance"
        case memberof = "memberOf"
        public var description: String { return self.rawValue }
    }

    public enum PlacementStrategyType: String, CustomStringConvertible, Codable {
        case random = "random"
        case spread = "spread"
        case binpack = "binpack"
        public var description: String { return self.rawValue }
    }

    public enum PlatformDeviceType: String, CustomStringConvertible, Codable {
        case gpu = "GPU"
        public var description: String { return self.rawValue }
    }

    public enum PropagateTags: String, CustomStringConvertible, Codable {
        case taskDefinition = "TASK_DEFINITION"
        case service = "SERVICE"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum ProxyConfigurationType: String, CustomStringConvertible, Codable {
        case appmesh = "APPMESH"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case gpu = "GPU"
        case inferenceaccelerator = "InferenceAccelerator"
        public var description: String { return self.rawValue }
    }

    public enum ScaleUnit: String, CustomStringConvertible, Codable {
        case percent = "PERCENT"
        public var description: String { return self.rawValue }
    }

    public enum SchedulingStrategy: String, CustomStringConvertible, Codable {
        case replica = "REPLICA"
        case daemon = "DAEMON"
        public var description: String { return self.rawValue }
    }

    public enum Scope: String, CustomStringConvertible, Codable {
        case task = "task"
        case shared = "shared"
        public var description: String { return self.rawValue }
    }

    public enum ServiceField: String, CustomStringConvertible, Codable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum SettingName: String, CustomStringConvertible, Codable {
        case servicelongarnformat = "serviceLongArnFormat"
        case tasklongarnformat = "taskLongArnFormat"
        case containerinstancelongarnformat = "containerInstanceLongArnFormat"
        case awsvpctrunking = "awsvpcTrunking"
        case containerinsights = "containerInsights"
        public var description: String { return self.rawValue }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public enum StabilityStatus: String, CustomStringConvertible, Codable {
        case steadyState = "STEADY_STATE"
        case stabilizing = "STABILIZING"
        public var description: String { return self.rawValue }
    }

    public enum TargetType: String, CustomStringConvertible, Codable {
        case containerInstance = "container-instance"
        public var description: String { return self.rawValue }
    }

    public enum TaskDefinitionFamilyStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public enum TaskDefinitionField: String, CustomStringConvertible, Codable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum TaskDefinitionPlacementConstraintType: String, CustomStringConvertible, Codable {
        case memberof = "memberOf"
        public var description: String { return self.rawValue }
    }

    public enum TaskDefinitionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum TaskField: String, CustomStringConvertible, Codable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum TaskSetField: String, CustomStringConvertible, Codable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum TaskStopCode: String, CustomStringConvertible, Codable {
        case taskfailedtostart = "TaskFailedToStart"
        case essentialcontainerexited = "EssentialContainerExited"
        case userinitiated = "UserInitiated"
        public var description: String { return self.rawValue }
    }

    public enum TransportProtocol: String, CustomStringConvertible, Codable {
        case tcp = "tcp"
        case udp = "udp"
        public var description: String { return self.rawValue }
    }

    public enum UlimitName: String, CustomStringConvertible, Codable {
        case core = "core"
        case cpu = "cpu"
        case data = "data"
        case fsize = "fsize"
        case locks = "locks"
        case memlock = "memlock"
        case msgqueue = "msgqueue"
        case nice = "nice"
        case nofile = "nofile"
        case nproc = "nproc"
        case rss = "rss"
        case rtprio = "rtprio"
        case rttime = "rttime"
        case sigpending = "sigpending"
        case stack = "stack"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct Attachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "details", required: false, type: .list), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .string)
        ]

        /// Details of the attachment. For elastic network interfaces, this includes the network interface ID, the MAC address, the subnet ID, and the private IPv4 address.
        public let details: [KeyValuePair]?
        /// The unique identifier for the attachment.
        public let id: String?
        ///  The status of the attachment. Valid values are PRECREATED, CREATED, ATTACHING, ATTACHED, DETACHING, DETACHED, and DELETED.
        public let status: String?
        /// The type of the attachment, such as ElasticNetworkInterface.
        public let `type`: String?

        public init(details: [KeyValuePair]? = nil, id: String? = nil, status: String? = nil, type: String? = nil) {
            self.details = details
            self.id = id
            self.status = status
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case id = "id"
            case status = "status"
            case `type` = "type"
        }
    }

    public struct AttachmentStateChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachmentArn", required: true, type: .string), 
            AWSShapeMember(label: "status", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the attachment.
        public let attachmentArn: String
        /// The status of the attachment.
        public let status: String

        public init(attachmentArn: String, status: String) {
            self.attachmentArn = attachmentArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentArn = "attachmentArn"
            case status = "status"
        }
    }

    public struct Attribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "targetId", required: false, type: .string), 
            AWSShapeMember(label: "targetType", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]

        /// The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens, underscores, and periods are allowed.
        public let name: String
        /// The ID of the target. You can specify the short form ID for a resource or the full Amazon Resource Name (ARN).
        public let targetId: String?
        /// The type of the target with which to attach the attribute. This parameter is required if you use the short form ID for a resource instead of the full ARN.
        public let targetType: TargetType?
        /// The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are allowed.
        public let value: String?

        public init(name: String, targetId: String? = nil, targetType: TargetType? = nil, value: String? = nil) {
            self.name = name
            self.targetId = targetId
            self.targetType = targetType
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case targetId = "targetId"
            case targetType = "targetType"
            case value = "value"
        }
    }

    public struct AutoScalingGroupProvider: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoScalingGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "managedScaling", required: false, type: .structure), 
            AWSShapeMember(label: "managedTerminationProtection", required: false, type: .enum)
        ]

        /// The Amazon Resource Name (ARN) that identifies the Auto Scaling group.
        public let autoScalingGroupArn: String
        /// The managed scaling settings for the Auto Scaling group capacity provider.
        public let managedScaling: ManagedScaling?
        /// The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection.  When using managed termination protection, managed scaling must also be used otherwise managed termination protection will not work.  When managed termination protection is enabled, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions enabled as well. For more information, see Instance Protection in the AWS Auto Scaling User Guide. When managed termination protection is disabled, your Amazon EC2 instances are not protected from termination when the Auto Scaling group scales in.
        public let managedTerminationProtection: ManagedTerminationProtection?

        public init(autoScalingGroupArn: String, managedScaling: ManagedScaling? = nil, managedTerminationProtection: ManagedTerminationProtection? = nil) {
            self.autoScalingGroupArn = autoScalingGroupArn
            self.managedScaling = managedScaling
            self.managedTerminationProtection = managedTerminationProtection
        }

        public func validate(name: String) throws {
            try self.managedScaling?.validate(name: "\(name).managedScaling")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupArn = "autoScalingGroupArn"
            case managedScaling = "managedScaling"
            case managedTerminationProtection = "managedTerminationProtection"
        }
    }

    public struct AwsVpcConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assignPublicIp", required: false, type: .enum), 
            AWSShapeMember(label: "securityGroups", required: false, type: .list), 
            AWSShapeMember(label: "subnets", required: true, type: .list)
        ]

        /// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
        public let assignPublicIp: AssignPublicIp?
        /// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.  All specified security groups must be from the same VPC. 
        public let securityGroups: [String]?
        /// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.  All specified subnets must be from the same VPC. 
        public let subnets: [String]

        public init(assignPublicIp: AssignPublicIp? = nil, securityGroups: [String]? = nil, subnets: [String]) {
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case assignPublicIp = "assignPublicIp"
            case securityGroups = "securityGroups"
            case subnets = "subnets"
        }
    }

    public struct CapacityProvider: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoScalingGroupProvider", required: false, type: .structure), 
            AWSShapeMember(label: "capacityProviderArn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The Auto Scaling group settings for the capacity provider.
        public let autoScalingGroupProvider: AutoScalingGroupProvider?
        /// The Amazon Resource Name (ARN) that identifies the capacity provider.
        public let capacityProviderArn: String?
        /// The name of the capacity provider.
        public let name: String?
        /// The current status of the capacity provider. Only capacity providers in an ACTIVE state can be used in a cluster.
        public let status: CapacityProviderStatus?
        /// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?

        public init(autoScalingGroupProvider: AutoScalingGroupProvider? = nil, capacityProviderArn: String? = nil, name: String? = nil, status: CapacityProviderStatus? = nil, tags: [Tag]? = nil) {
            self.autoScalingGroupProvider = autoScalingGroupProvider
            self.capacityProviderArn = capacityProviderArn
            self.name = name
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupProvider = "autoScalingGroupProvider"
            case capacityProviderArn = "capacityProviderArn"
            case name = "name"
            case status = "status"
            case tags = "tags"
        }
    }

    public struct CapacityProviderStrategyItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "base", required: false, type: .integer), 
            AWSShapeMember(label: "capacityProvider", required: true, type: .string), 
            AWSShapeMember(label: "weight", required: false, type: .integer)
        ]

        /// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
        public let base: Int?
        /// The short name of the capacity provider.
        public let capacityProvider: String
        /// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. For example, if you have a strategy that contains two capacity providers and both have a weight of 1, then when the base is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of 1 for capacityProviderA and a weight of 4 for capacityProviderB, then for every one task that is run using capacityProviderA, four tasks would use capacityProviderB.
        public let weight: Int?

        public init(base: Int? = nil, capacityProvider: String, weight: Int? = nil) {
            self.base = base
            self.capacityProvider = capacityProvider
            self.weight = weight
        }

        public func validate(name: String) throws {
            try validate(self.base, name:"base", parent: name, max: 100000)
            try validate(self.base, name:"base", parent: name, min: 0)
            try validate(self.weight, name:"weight", parent: name, max: 1000)
            try validate(self.weight, name:"weight", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case base = "base"
            case capacityProvider = "capacityProvider"
            case weight = "weight"
        }
    }

    public struct Cluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activeServicesCount", required: false, type: .integer), 
            AWSShapeMember(label: "attachments", required: false, type: .list), 
            AWSShapeMember(label: "attachmentsStatus", required: false, type: .string), 
            AWSShapeMember(label: "capacityProviders", required: false, type: .list), 
            AWSShapeMember(label: "clusterArn", required: false, type: .string), 
            AWSShapeMember(label: "clusterName", required: false, type: .string), 
            AWSShapeMember(label: "defaultCapacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "pendingTasksCount", required: false, type: .integer), 
            AWSShapeMember(label: "registeredContainerInstancesCount", required: false, type: .integer), 
            AWSShapeMember(label: "runningTasksCount", required: false, type: .integer), 
            AWSShapeMember(label: "settings", required: false, type: .list), 
            AWSShapeMember(label: "statistics", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The number of services that are running on the cluster in an ACTIVE state. You can view these services with ListServices.
        public let activeServicesCount: Int?
        /// The resources attached to a cluster. When using a capacity provider with a cluster, the Auto Scaling plan that is created will be returned as a cluster attachment.
        public let attachments: [Attachment]?
        /// The status of the capacity providers associated with the cluster. The following are the states that will be returned:  UPDATE_IN_PROGRESS  The available capacity providers for the cluster are updating. This occurs when the Auto Scaling plan is provisioning or deprovisioning.  UPDATE_COMPLETE  The capacity providers have successfully updated.  UPDATE_FAILED  The capacity provider updates failed.  
        public let attachmentsStatus: String?
        /// The capacity providers associated with the cluster.
        public let capacityProviders: [String]?
        /// The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the arn:aws:ecs namespace, followed by the Region of the cluster, the AWS account ID of the cluster owner, the cluster namespace, and then the cluster name. For example, arn:aws:ecs:region:012345678910:cluster/test.
        public let clusterArn: String?
        /// A user-generated string that you use to identify your cluster.
        public let clusterName: String?
        /// The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.
        public let defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The number of tasks in the cluster that are in the PENDING state.
        public let pendingTasksCount: Int?
        /// The number of container instances registered into the cluster. This includes container instances in both ACTIVE and DRAINING status.
        public let registeredContainerInstancesCount: Int?
        /// The number of tasks in the cluster that are in the RUNNING state.
        public let runningTasksCount: Int?
        /// The settings for the cluster. This parameter indicates whether CloudWatch Container Insights is enabled or disabled for a cluster.
        public let settings: [ClusterSetting]?
        /// Additional information about your clusters that are separated by launch type, including:   runningEC2TasksCount   RunningFargateTasksCount   pendingEC2TasksCount   pendingFargateTasksCount   activeEC2ServiceCount   activeFargateServiceCount   drainingEC2ServiceCount   drainingFargateServiceCount  
        public let statistics: [KeyValuePair]?
        /// The status of the cluster. The following are the possible states that will be returned.  ACTIVE  The cluster is ready to accept tasks and if applicable you can register container instances with the cluster.  PROVISIONING  The cluster has capacity providers associated with it and the resources needed for the capacity provider are being created.  DEPROVISIONING  The cluster has capacity providers associated with it and the resources needed for the capacity provider are being deleted.  FAILED  The cluster has capacity providers associated with it and the resources needed for the capacity provider have failed to create.  INACTIVE  The cluster has been deleted. Clusters with an INACTIVE status may remain discoverable in your account for a period of time. However, this behavior is subject to change in the future, so you should not rely on INACTIVE clusters persisting.  
        public let status: String?
        /// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?

        public init(activeServicesCount: Int? = nil, attachments: [Attachment]? = nil, attachmentsStatus: String? = nil, capacityProviders: [String]? = nil, clusterArn: String? = nil, clusterName: String? = nil, defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, pendingTasksCount: Int? = nil, registeredContainerInstancesCount: Int? = nil, runningTasksCount: Int? = nil, settings: [ClusterSetting]? = nil, statistics: [KeyValuePair]? = nil, status: String? = nil, tags: [Tag]? = nil) {
            self.activeServicesCount = activeServicesCount
            self.attachments = attachments
            self.attachmentsStatus = attachmentsStatus
            self.capacityProviders = capacityProviders
            self.clusterArn = clusterArn
            self.clusterName = clusterName
            self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
            self.pendingTasksCount = pendingTasksCount
            self.registeredContainerInstancesCount = registeredContainerInstancesCount
            self.runningTasksCount = runningTasksCount
            self.settings = settings
            self.statistics = statistics
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case activeServicesCount = "activeServicesCount"
            case attachments = "attachments"
            case attachmentsStatus = "attachmentsStatus"
            case capacityProviders = "capacityProviders"
            case clusterArn = "clusterArn"
            case clusterName = "clusterName"
            case defaultCapacityProviderStrategy = "defaultCapacityProviderStrategy"
            case pendingTasksCount = "pendingTasksCount"
            case registeredContainerInstancesCount = "registeredContainerInstancesCount"
            case runningTasksCount = "runningTasksCount"
            case settings = "settings"
            case statistics = "statistics"
            case status = "status"
            case tags = "tags"
        }
    }

    public struct ClusterSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]

        /// The name of the cluster setting. The only supported value is containerInsights.
        public let name: ClusterSettingName?
        /// The value to set for the cluster setting. The supported values are enabled and disabled. If enabled is specified, CloudWatch Container Insights will be enabled for the cluster, otherwise it will be disabled unless the containerInsights account setting is enabled. If a cluster value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
        public let value: String?

        public init(name: ClusterSettingName? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct Container: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerArn", required: false, type: .string), 
            AWSShapeMember(label: "cpu", required: false, type: .string), 
            AWSShapeMember(label: "exitCode", required: false, type: .integer), 
            AWSShapeMember(label: "gpuIds", required: false, type: .list), 
            AWSShapeMember(label: "healthStatus", required: false, type: .enum), 
            AWSShapeMember(label: "image", required: false, type: .string), 
            AWSShapeMember(label: "imageDigest", required: false, type: .string), 
            AWSShapeMember(label: "lastStatus", required: false, type: .string), 
            AWSShapeMember(label: "memory", required: false, type: .string), 
            AWSShapeMember(label: "memoryReservation", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "networkBindings", required: false, type: .list), 
            AWSShapeMember(label: "networkInterfaces", required: false, type: .list), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "runtimeId", required: false, type: .string), 
            AWSShapeMember(label: "taskArn", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the container.
        public let containerArn: String?
        /// The number of CPU units set for the container. The value will be 0 if no value was specified in the container definition when the task definition was registered.
        public let cpu: String?
        /// The exit code returned from the container.
        public let exitCode: Int?
        /// The IDs of each GPU assigned to the container.
        public let gpuIds: [String]?
        /// The health status of the container. If health checks are not configured for this container in its task definition, then it reports the health status as UNKNOWN.
        public let healthStatus: HealthStatus?
        /// The image used for the container.
        public let image: String?
        /// The container image manifest digest.  The imageDigest is only returned if the container is using an image hosted in Amazon ECR, otherwise it is omitted. 
        public let imageDigest: String?
        /// The last known status of the container.
        public let lastStatus: String?
        /// The hard limit (in MiB) of memory set for the container.
        public let memory: String?
        /// The soft limit (in MiB) of memory set for the container.
        public let memoryReservation: String?
        /// The name of the container.
        public let name: String?
        /// The network bindings associated with the container.
        public let networkBindings: [NetworkBinding]?
        /// The network interfaces associated with the container.
        public let networkInterfaces: [NetworkInterface]?
        /// A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        public let reason: String?
        /// The ID of the Docker container.
        public let runtimeId: String?
        /// The ARN of the task.
        public let taskArn: String?

        public init(containerArn: String? = nil, cpu: String? = nil, exitCode: Int? = nil, gpuIds: [String]? = nil, healthStatus: HealthStatus? = nil, image: String? = nil, imageDigest: String? = nil, lastStatus: String? = nil, memory: String? = nil, memoryReservation: String? = nil, name: String? = nil, networkBindings: [NetworkBinding]? = nil, networkInterfaces: [NetworkInterface]? = nil, reason: String? = nil, runtimeId: String? = nil, taskArn: String? = nil) {
            self.containerArn = containerArn
            self.cpu = cpu
            self.exitCode = exitCode
            self.gpuIds = gpuIds
            self.healthStatus = healthStatus
            self.image = image
            self.imageDigest = imageDigest
            self.lastStatus = lastStatus
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.networkBindings = networkBindings
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.runtimeId = runtimeId
            self.taskArn = taskArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerArn = "containerArn"
            case cpu = "cpu"
            case exitCode = "exitCode"
            case gpuIds = "gpuIds"
            case healthStatus = "healthStatus"
            case image = "image"
            case imageDigest = "imageDigest"
            case lastStatus = "lastStatus"
            case memory = "memory"
            case memoryReservation = "memoryReservation"
            case name = "name"
            case networkBindings = "networkBindings"
            case networkInterfaces = "networkInterfaces"
            case reason = "reason"
            case runtimeId = "runtimeId"
            case taskArn = "taskArn"
        }
    }

    public struct ContainerDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "command", required: false, type: .list), 
            AWSShapeMember(label: "cpu", required: false, type: .integer), 
            AWSShapeMember(label: "dependsOn", required: false, type: .list), 
            AWSShapeMember(label: "disableNetworking", required: false, type: .boolean), 
            AWSShapeMember(label: "dnsSearchDomains", required: false, type: .list), 
            AWSShapeMember(label: "dnsServers", required: false, type: .list), 
            AWSShapeMember(label: "dockerLabels", required: false, type: .map), 
            AWSShapeMember(label: "dockerSecurityOptions", required: false, type: .list), 
            AWSShapeMember(label: "entryPoint", required: false, type: .list), 
            AWSShapeMember(label: "environment", required: false, type: .list), 
            AWSShapeMember(label: "essential", required: false, type: .boolean), 
            AWSShapeMember(label: "extraHosts", required: false, type: .list), 
            AWSShapeMember(label: "firelensConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "healthCheck", required: false, type: .structure), 
            AWSShapeMember(label: "hostname", required: false, type: .string), 
            AWSShapeMember(label: "image", required: false, type: .string), 
            AWSShapeMember(label: "interactive", required: false, type: .boolean), 
            AWSShapeMember(label: "links", required: false, type: .list), 
            AWSShapeMember(label: "linuxParameters", required: false, type: .structure), 
            AWSShapeMember(label: "logConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "memory", required: false, type: .integer), 
            AWSShapeMember(label: "memoryReservation", required: false, type: .integer), 
            AWSShapeMember(label: "mountPoints", required: false, type: .list), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "portMappings", required: false, type: .list), 
            AWSShapeMember(label: "privileged", required: false, type: .boolean), 
            AWSShapeMember(label: "pseudoTerminal", required: false, type: .boolean), 
            AWSShapeMember(label: "readonlyRootFilesystem", required: false, type: .boolean), 
            AWSShapeMember(label: "repositoryCredentials", required: false, type: .structure), 
            AWSShapeMember(label: "resourceRequirements", required: false, type: .list), 
            AWSShapeMember(label: "secrets", required: false, type: .list), 
            AWSShapeMember(label: "startTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "stopTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "systemControls", required: false, type: .list), 
            AWSShapeMember(label: "ulimits", required: false, type: .list), 
            AWSShapeMember(label: "user", required: false, type: .string), 
            AWSShapeMember(label: "volumesFrom", required: false, type: .list), 
            AWSShapeMember(label: "workingDirectory", required: false, type: .string)
        ]

        /// The command that is passed to the container. This parameter maps to Cmd in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#cmd. If there are multiple arguments, each argument should be a separated string in the array.
        public let command: [String]?
        /// The number of cpu units reserved for the container. This parameter maps to CpuShares in the Create a container section of the Docker Remote API and the --cpu-shares option to docker run. This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level cpu value.  You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the Amazon EC2 Instances detail page by 1,024.  Linux containers share unallocated CPU units with other containers on the container instance with the same ratio as their allocated amount. For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that is the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task would be guaranteed a minimum of 512 CPU units when needed, and each container could float to higher CPU usage if the other container was not using it, but if both tasks were 100% active all of the time, they would be limited to 512 CPU units. On Linux container instances, the Docker daemon on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers. For more information, see CPU share constraint in the Docker documentation. The minimum valid CPU share value that the Linux kernel allows is 2. However, the CPU parameter is not required, and you can use CPU values below 2 in your container definitions. For CPU values below 2 (including null), the behavior varies based on your Amazon ECS container agent version:    Agent versions less than or equal to 1.1.0: Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares.    Agent versions greater than or equal to 1.2.0: Null, zero, and CPU values of 1 are passed to Docker as 2.   On Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only have access to the specified amount of CPU that is described in the task definition.
        public let cpu: Int?
        /// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed. For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see Updating the Amazon ECS Container Agent in the Amazon Elastic Container Service Developer Guide. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ecs-init package. If your container instances are launched from version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see Amazon ECS-optimized Linux AMI in the Amazon Elastic Container Service Developer Guide. For tasks using the Fargate launch type, the task or service requires platform version 1.3.0 or later.
        public let dependsOn: [ContainerDependency]?
        /// When this parameter is true, networking is disabled within the container. This parameter maps to NetworkDisabled in the Create a container section of the Docker Remote API.  This parameter is not supported for Windows containers. 
        public let disableNetworking: Bool?
        /// A list of DNS search domains that are presented to the container. This parameter maps to DnsSearch in the Create a container section of the Docker Remote API and the --dns-search option to docker run.  This parameter is not supported for Windows containers. 
        public let dnsSearchDomains: [String]?
        /// A list of DNS servers that are presented to the container. This parameter maps to Dns in the Create a container section of the Docker Remote API and the --dns option to docker run.  This parameter is not supported for Windows containers. 
        public let dnsServers: [String]?
        /// A key/value map of labels to add to the container. This parameter maps to Labels in the Create a container section of the Docker Remote API and the --label option to docker run. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' 
        public let dockerLabels: [String: String]?
        /// A list of strings to provide custom labels for SELinux and AppArmor multi-level security systems. This field is not valid for containers in tasks using the Fargate launch type. With Windows containers, this parameter can be used to reference a credential spec file when configuring a container for Active Directory authentication. For more information, see Using gMSAs for Windows Containers in the Amazon Elastic Container Service Developer Guide. This parameter maps to SecurityOpt in the Create a container section of the Docker Remote API and the --security-opt option to docker run.  The Amazon ECS container agent running on a container instance must register with the ECS_SELINUX_CAPABLE=true or ECS_APPARMOR_CAPABLE=true environment variables before containers placed on that instance can use these security options. For more information, see Amazon ECS Container Agent Configuration in the Amazon Elastic Container Service Developer Guide. 
        public let dockerSecurityOptions: [String]?
        ///  Early versions of the Amazon ECS container agent do not properly handle entryPoint parameters. If you have problems using entryPoint, update your container agent or enter your commands and arguments as command array items instead.  The entry point that is passed to the container. This parameter maps to Entrypoint in the Create a container section of the Docker Remote API and the --entrypoint option to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#entrypoint.
        public let entryPoint: [String]?
        /// The environment variables to pass to a container. This parameter maps to Env in the Create a container section of the Docker Remote API and the --env option to docker run.  We do not recommend using plaintext environment variables for sensitive information, such as credential data. 
        public let environment: [KeyValuePair]?
        /// If the essential parameter of a container is marked as true, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the essential parameter of a container is marked as false, then its failure does not affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential. All tasks must have at least one essential container. If you have an application that is composed of multiple containers, you should group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see Application Architecture in the Amazon Elastic Container Service Developer Guide.
        public let essential: Bool?
        /// A list of hostnames and IP address mappings to append to the /etc/hosts file on the container. This parameter maps to ExtraHosts in the Create a container section of the Docker Remote API and the --add-host option to docker run.  This parameter is not supported for Windows containers or tasks that use the awsvpc network mode. 
        public let extraHosts: [HostEntry]?
        /// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see Custom Log Routing in the Amazon Elastic Container Service Developer Guide.
        public let firelensConfiguration: FirelensConfiguration?
        /// The container health check command and associated configuration parameters for the container. This parameter maps to HealthCheck in the Create a container section of the Docker Remote API and the HEALTHCHECK parameter of docker run.
        public let healthCheck: HealthCheck?
        /// The hostname to use for your container. This parameter maps to Hostname in the Create a container section of the Docker Remote API and the --hostname option to docker run.  The hostname parameter is not supported if you are using the awsvpc network mode. 
        public let hostname: String?
        /// The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with either  repository-url/image:tag  or  repository-url/image@digest . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of docker run.   When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image are not propagated to already running tasks.   Images in Amazon ECR repositories can be specified by either using the full registry/repository:tag or registry/repository@digest. For example, 012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest or 012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE.    Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).   Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).   Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).  
        public let image: String?
        /// When this parameter is true, this allows you to deploy containerized applications that require stdin or a tty to be allocated. This parameter maps to OpenStdin in the Create a container section of the Docker Remote API and the --interactive option to docker run.
        public let interactive: Bool?
        /// The links parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is bridge. The name:internalName construct is analogous to name:alias in Docker links. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed. For more information about linking Docker containers, go to Legacy container links in the Docker documentation. This parameter maps to Links in the Create a container section of the Docker Remote API and the --link option to docker run.  This parameter is not supported for Windows containers.   Containers that are collocated on a single container instance may be able to communicate with each other without requiring links or host port mappings. Network isolation is achieved on the container instance using security groups and VPC settings. 
        public let links: [String]?
        /// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see KernelCapabilities.  This parameter is not supported for Windows containers. 
        public let linuxParameters: LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see Configure logging drivers in the Docker documentation.  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS Container Agent Configuration in the Amazon Elastic Container Service Developer Guide. 
        public let logConfiguration: LogConfiguration?
        /// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task memory value, if one is specified. This parameter maps to Memory in the Create a container section of the Docker Remote API and the --memory option to docker run. If using the Fargate launch type, this parameter is optional. If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level memory and memoryReservation value, memory must be greater than memoryReservation. If you specify memoryReservation, then that value is subtracted from the available memory resources for the container instance on which the container is placed. Otherwise, the value of memory is used. The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers.
        public let memory: Int?
        /// The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the memory parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to MemoryReservation in the Create a container section of the Docker Remote API and the --memory-reservation option to docker run. If a task-level memory value is not specified, you must specify a non-zero integer for one or both of memory or memoryReservation in a container definition. If you specify both, memory must be greater than memoryReservation. If you specify memoryReservation, then that value is subtracted from the available memory resources for the container instance on which the container is placed. Otherwise, the value of memory is used. For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of memory for short periods of time, you can set a memoryReservation of 128 MiB, and a memory hard limit of 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining resources on the container instance, but also allow the container to consume more memory resources when needed. The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers. 
        public let memoryReservation: Int?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container section of the Docker Remote API and the --volume option to docker run. Windows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers cannot mount directories on a different drive, and mount point cannot be across drives.
        public let mountPoints: [MountPoint]?
        /// The name of a container. If you are linking multiple containers together in a task definition, the name of one container can be entered in the links of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed. This parameter maps to name in the Create a container section of the Docker Remote API and the --name option to docker run. 
        public let name: String?
        /// The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic. For task definitions that use the awsvpc network mode, you should only specify the containerPort. The hostPort can be left blank or it must be the same value as the containerPort. Port mappings on Windows use the NetNAT gateway address rather than localhost. There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.  This parameter maps to PortBindings in the Create a container section of the Docker Remote API and the --publish option to docker run. If the network mode of a task definition is set to none, then you can't specify port mappings. If the network mode of a task definition is set to host, then host ports must either be undefined or they must match the container port in the port mapping.  After a task reaches the RUNNING status, manual and automatic host and container port assignments are visible in the Network Bindings section of a container description for a selected task in the Amazon ECS console. The assignments are also visible in the networkBindings section DescribeTasks responses. 
        public let portMappings: [PortMapping]?
        /// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container section of the Docker Remote API and the --privileged option to docker run.  This parameter is not supported for Windows containers or tasks using the Fargate launch type. 
        public let privileged: Bool?
        /// When this parameter is true, a TTY is allocated. This parameter maps to Tty in the Create a container section of the Docker Remote API and the --tty option to docker run.
        public let pseudoTerminal: Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to docker run.  This parameter is not supported for Windows containers. 
        public let readonlyRootFilesystem: Bool?
        /// The private repository authentication credentials to use.
        public let repositoryCredentials: RepositoryCredentials?
        /// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// The secrets to pass to the container. For more information, see Specifying Sensitive Data in the Amazon Elastic Container Service Developer Guide.
        public let secrets: [Secret]?
        /// Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a COMPLETE, SUCCESS, or HEALTHY status. If a startTimeout value is specified for containerB and it does not reach the desired status within that time then containerA will give up and not start. This results in the task transitioning to a STOPPED state. For tasks using the Fargate launch type, this parameter requires that the task or service uses platform version 1.3.0 or later. If this parameter is not specified, the default value of 3 minutes is used. For tasks using the EC2 launch type, if the startTimeout parameter is not specified, the value set for the Amazon ECS container agent configuration variable ECS_CONTAINER_START_TIMEOUT is used by default. If neither the startTimeout parameter or the ECS_CONTAINER_START_TIMEOUT agent configuration variable are set, then the default values of 3 minutes for Linux containers and 8 minutes on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to enable a container start timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see Updating the Amazon ECS Container Agent in the Amazon Elastic Container Service Developer Guide. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ecs-init package. If your container instances are launched from version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see Amazon ECS-optimized Linux AMI in the Amazon Elastic Container Service Developer Guide.
        public let startTimeout: Int?
        /// Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own. For tasks using the Fargate launch type, the task or service requires platform version 1.3.0 or later. The max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used. For tasks using the EC2 launch type, if the stopTimeout parameter is not specified, the value set for the Amazon ECS container agent configuration variable ECS_CONTAINER_STOP_TIMEOUT is used by default. If neither the stopTimeout parameter or the ECS_CONTAINER_STOP_TIMEOUT agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to enable a container stop timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see Updating the Amazon ECS Container Agent in the Amazon Elastic Container Service Developer Guide. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ecs-init package. If your container instances are launched from version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see Amazon ECS-optimized Linux AMI in the Amazon Elastic Container Service Developer Guide.
        public let stopTimeout: Int?
        /// A list of namespaced kernel parameters to set in the container. This parameter maps to Sysctls in the Create a container section of the Docker Remote API and the --sysctl option to docker run.  It is not recommended that you specify network-related systemControls parameters for multiple containers in a single task that also uses either the awsvpc or host network modes. For tasks that use the awsvpc network mode, the container that is started last determines which systemControls parameters take effect. For tasks that use the host network mode, it changes the container instance's namespaced kernel parameters as well as the containers. 
        public let systemControls: [SystemControl]?
        /// A list of ulimits to set in the container. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run. Valid naming values are displayed in the Ulimit data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'   This parameter is not supported for Windows containers. 
        public let ulimits: [Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run. You can use the following formats. If specifying a UID or GID, you must specify it as a positive integer.    user     user:group     uid     uid:gid     user:gid     uid:group     This parameter is not supported for Windows containers. 
        public let user: String?
        /// Data volumes to mount from another container. This parameter maps to VolumesFrom in the Create a container section of the Docker Remote API and the --volumes-from option to docker run.
        public let volumesFrom: [VolumeFrom]?
        /// The working directory in which to run commands inside the container. This parameter maps to WorkingDir in the Create a container section of the Docker Remote API and the --workdir option to docker run.
        public let workingDirectory: String?

        public init(command: [String]? = nil, cpu: Int? = nil, dependsOn: [ContainerDependency]? = nil, disableNetworking: Bool? = nil, dnsSearchDomains: [String]? = nil, dnsServers: [String]? = nil, dockerLabels: [String: String]? = nil, dockerSecurityOptions: [String]? = nil, entryPoint: [String]? = nil, environment: [KeyValuePair]? = nil, essential: Bool? = nil, extraHosts: [HostEntry]? = nil, firelensConfiguration: FirelensConfiguration? = nil, healthCheck: HealthCheck? = nil, hostname: String? = nil, image: String? = nil, interactive: Bool? = nil, links: [String]? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, memory: Int? = nil, memoryReservation: Int? = nil, mountPoints: [MountPoint]? = nil, name: String? = nil, portMappings: [PortMapping]? = nil, privileged: Bool? = nil, pseudoTerminal: Bool? = nil, readonlyRootFilesystem: Bool? = nil, repositoryCredentials: RepositoryCredentials? = nil, resourceRequirements: [ResourceRequirement]? = nil, secrets: [Secret]? = nil, startTimeout: Int? = nil, stopTimeout: Int? = nil, systemControls: [SystemControl]? = nil, ulimits: [Ulimit]? = nil, user: String? = nil, volumesFrom: [VolumeFrom]? = nil, workingDirectory: String? = nil) {
            self.command = command
            self.cpu = cpu
            self.dependsOn = dependsOn
            self.disableNetworking = disableNetworking
            self.dnsSearchDomains = dnsSearchDomains
            self.dnsServers = dnsServers
            self.dockerLabels = dockerLabels
            self.dockerSecurityOptions = dockerSecurityOptions
            self.entryPoint = entryPoint
            self.environment = environment
            self.essential = essential
            self.extraHosts = extraHosts
            self.firelensConfiguration = firelensConfiguration
            self.healthCheck = healthCheck
            self.hostname = hostname
            self.image = image
            self.interactive = interactive
            self.links = links
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.mountPoints = mountPoints
            self.name = name
            self.portMappings = portMappings
            self.privileged = privileged
            self.pseudoTerminal = pseudoTerminal
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.startTimeout = startTimeout
            self.stopTimeout = stopTimeout
            self.systemControls = systemControls
            self.ulimits = ulimits
            self.user = user
            self.volumesFrom = volumesFrom
            self.workingDirectory = workingDirectory
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case cpu = "cpu"
            case dependsOn = "dependsOn"
            case disableNetworking = "disableNetworking"
            case dnsSearchDomains = "dnsSearchDomains"
            case dnsServers = "dnsServers"
            case dockerLabels = "dockerLabels"
            case dockerSecurityOptions = "dockerSecurityOptions"
            case entryPoint = "entryPoint"
            case environment = "environment"
            case essential = "essential"
            case extraHosts = "extraHosts"
            case firelensConfiguration = "firelensConfiguration"
            case healthCheck = "healthCheck"
            case hostname = "hostname"
            case image = "image"
            case interactive = "interactive"
            case links = "links"
            case linuxParameters = "linuxParameters"
            case logConfiguration = "logConfiguration"
            case memory = "memory"
            case memoryReservation = "memoryReservation"
            case mountPoints = "mountPoints"
            case name = "name"
            case portMappings = "portMappings"
            case privileged = "privileged"
            case pseudoTerminal = "pseudoTerminal"
            case readonlyRootFilesystem = "readonlyRootFilesystem"
            case repositoryCredentials = "repositoryCredentials"
            case resourceRequirements = "resourceRequirements"
            case secrets = "secrets"
            case startTimeout = "startTimeout"
            case stopTimeout = "stopTimeout"
            case systemControls = "systemControls"
            case ulimits = "ulimits"
            case user = "user"
            case volumesFrom = "volumesFrom"
            case workingDirectory = "workingDirectory"
        }
    }

    public struct ContainerDependency: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "condition", required: true, type: .enum), 
            AWSShapeMember(label: "containerName", required: true, type: .string)
        ]

        /// The dependency condition of the container. The following are the available conditions and their behavior:    START - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.    COMPLETE - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit.    SUCCESS - This condition is the same as COMPLETE, but it also requires that the container exits with a zero status.    HEALTHY - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.  
        public let condition: ContainerCondition
        /// The name of a container.
        public let containerName: String

        public init(condition: ContainerCondition, containerName: String) {
            self.condition = condition
            self.containerName = containerName
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "condition"
            case containerName = "containerName"
        }
    }

    public struct ContainerInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentConnected", required: false, type: .boolean), 
            AWSShapeMember(label: "agentUpdateStatus", required: false, type: .enum), 
            AWSShapeMember(label: "attachments", required: false, type: .list), 
            AWSShapeMember(label: "attributes", required: false, type: .list), 
            AWSShapeMember(label: "capacityProviderName", required: false, type: .string), 
            AWSShapeMember(label: "containerInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "ec2InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "pendingTasksCount", required: false, type: .integer), 
            AWSShapeMember(label: "registeredAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "registeredResources", required: false, type: .list), 
            AWSShapeMember(label: "remainingResources", required: false, type: .list), 
            AWSShapeMember(label: "runningTasksCount", required: false, type: .integer), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "statusReason", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "versionInfo", required: false, type: .structure)
        ]

        /// This parameter returns true if the agent is connected to Amazon ECS. Registered instances with an agent that may be unhealthy or stopped return false. Only instances connected to an agent can accept placement requests.
        public let agentConnected: Bool?
        /// The status of the most recent agent update. If an update has never been requested, this value is NULL.
        public let agentUpdateStatus: AgentUpdateStatus?
        /// The resources attached to a container instance, such as elastic network interfaces.
        public let attachments: [Attachment]?
        /// The attributes set for the container instance, either by the Amazon ECS container agent at instance registration or manually with the PutAttributes operation.
        public let attributes: [Attribute]?
        /// The capacity provider associated with the container instance.
        public let capacityProviderName: String?
        /// The Amazon Resource Name (ARN) of the container instance. The ARN contains the arn:aws:ecs namespace, followed by the Region of the container instance, the AWS account ID of the container instance owner, the container-instance namespace, and then the container instance ID. For example, arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID.
        public let containerInstanceArn: String?
        /// The EC2 instance ID of the container instance.
        public let ec2InstanceId: String?
        /// The number of tasks on the container instance that are in the PENDING status.
        public let pendingTasksCount: Int?
        /// The Unix timestamp for when the container instance was registered.
        public let registeredAt: TimeStamp?
        /// For CPU and memory resource types, this parameter describes the amount of each resource that was available on the container instance when the container agent registered it with Amazon ECS. This value represents the total amount of CPU and memory that can be allocated on this container instance to tasks. For port resource types, this parameter describes the ports that were reserved by the Amazon ECS container agent when it registered the container instance with Amazon ECS.
        public let registeredResources: [Resource]?
        /// For CPU and memory resource types, this parameter describes the remaining CPU and memory that has not already been allocated to tasks and is therefore available for new tasks. For port resource types, this parameter describes the ports that were reserved by the Amazon ECS container agent (at instance registration time) and any task containers that have reserved port mappings on the host (with the host or bridge network mode). Any port that is not specified here is available for new tasks.
        public let remainingResources: [Resource]?
        /// The number of tasks on the container instance that are in the RUNNING status.
        public let runningTasksCount: Int?
        /// The status of the container instance. The valid values are REGISTERING, REGISTRATION_FAILED, ACTIVE, INACTIVE, DEREGISTERING, or DRAINING. If your account has opted in to the awsvpcTrunking account setting, then any newly registered container instance will transition to a REGISTERING status while the trunk elastic network interface is provisioned for the instance. If the registration fails, the instance will transition to a REGISTRATION_FAILED status. You can describe the container instance and see the reason for failure in the statusReason parameter. Once the container instance is terminated, the instance transitions to a DEREGISTERING status while the trunk elastic network interface is deprovisioned. The instance then transitions to an INACTIVE status. The ACTIVE status indicates that the container instance can accept tasks. The DRAINING indicates that new tasks are not placed on the container instance and any service tasks running on the container instance are removed if possible. For more information, see Container Instance Draining in the Amazon Elastic Container Service Developer Guide.
        public let status: String?
        /// The reason that the container instance reached its current status.
        public let statusReason: String?
        /// The metadata that you apply to the container instance to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The version counter for the container instance. Every time a container instance experiences a change that triggers a CloudWatch event, the version counter is incremented. If you are replicating your Amazon ECS container instance state with CloudWatch Events, you can compare the version of a container instance reported by the Amazon ECS APIs with the version reported in CloudWatch Events for the container instance (inside the detail object) to verify that the version in your event stream is current.
        public let version: Int64?
        /// The version information for the Amazon ECS container agent and Docker daemon running on the container instance.
        public let versionInfo: VersionInfo?

        public init(agentConnected: Bool? = nil, agentUpdateStatus: AgentUpdateStatus? = nil, attachments: [Attachment]? = nil, attributes: [Attribute]? = nil, capacityProviderName: String? = nil, containerInstanceArn: String? = nil, ec2InstanceId: String? = nil, pendingTasksCount: Int? = nil, registeredAt: TimeStamp? = nil, registeredResources: [Resource]? = nil, remainingResources: [Resource]? = nil, runningTasksCount: Int? = nil, status: String? = nil, statusReason: String? = nil, tags: [Tag]? = nil, version: Int64? = nil, versionInfo: VersionInfo? = nil) {
            self.agentConnected = agentConnected
            self.agentUpdateStatus = agentUpdateStatus
            self.attachments = attachments
            self.attributes = attributes
            self.capacityProviderName = capacityProviderName
            self.containerInstanceArn = containerInstanceArn
            self.ec2InstanceId = ec2InstanceId
            self.pendingTasksCount = pendingTasksCount
            self.registeredAt = registeredAt
            self.registeredResources = registeredResources
            self.remainingResources = remainingResources
            self.runningTasksCount = runningTasksCount
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.version = version
            self.versionInfo = versionInfo
        }

        private enum CodingKeys: String, CodingKey {
            case agentConnected = "agentConnected"
            case agentUpdateStatus = "agentUpdateStatus"
            case attachments = "attachments"
            case attributes = "attributes"
            case capacityProviderName = "capacityProviderName"
            case containerInstanceArn = "containerInstanceArn"
            case ec2InstanceId = "ec2InstanceId"
            case pendingTasksCount = "pendingTasksCount"
            case registeredAt = "registeredAt"
            case registeredResources = "registeredResources"
            case remainingResources = "remainingResources"
            case runningTasksCount = "runningTasksCount"
            case status = "status"
            case statusReason = "statusReason"
            case tags = "tags"
            case version = "version"
            case versionInfo = "versionInfo"
        }
    }

    public struct ContainerOverride: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "command", required: false, type: .list), 
            AWSShapeMember(label: "cpu", required: false, type: .integer), 
            AWSShapeMember(label: "environment", required: false, type: .list), 
            AWSShapeMember(label: "memory", required: false, type: .integer), 
            AWSShapeMember(label: "memoryReservation", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "resourceRequirements", required: false, type: .list)
        ]

        /// The command to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
        public let command: [String]?
        /// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
        public let cpu: Int?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name.
        public let environment: [KeyValuePair]?
        /// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
        public let memory: Int?
        /// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
        public let memoryReservation: Int?
        /// The name of the container that receives the override. This parameter is required if any override is specified.
        public let name: String?
        /// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU.
        public let resourceRequirements: [ResourceRequirement]?

        public init(command: [String]? = nil, cpu: Int? = nil, environment: [KeyValuePair]? = nil, memory: Int? = nil, memoryReservation: Int? = nil, name: String? = nil, resourceRequirements: [ResourceRequirement]? = nil) {
            self.command = command
            self.cpu = cpu
            self.environment = environment
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.resourceRequirements = resourceRequirements
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case cpu = "cpu"
            case environment = "environment"
            case memory = "memory"
            case memoryReservation = "memoryReservation"
            case name = "name"
            case resourceRequirements = "resourceRequirements"
        }
    }

    public struct ContainerStateChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerName", required: false, type: .string), 
            AWSShapeMember(label: "exitCode", required: false, type: .integer), 
            AWSShapeMember(label: "imageDigest", required: false, type: .string), 
            AWSShapeMember(label: "networkBindings", required: false, type: .list), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "runtimeId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string)
        ]

        /// The name of the container.
        public let containerName: String?
        /// The exit code for the container, if the state change is a result of the container exiting.
        public let exitCode: Int?
        /// The container image SHA 256 digest.
        public let imageDigest: String?
        /// Any network bindings associated with the container.
        public let networkBindings: [NetworkBinding]?
        /// The reason for the state change.
        public let reason: String?
        /// The ID of the Docker container.
        public let runtimeId: String?
        /// The status of the container.
        public let status: String?

        public init(containerName: String? = nil, exitCode: Int? = nil, imageDigest: String? = nil, networkBindings: [NetworkBinding]? = nil, reason: String? = nil, runtimeId: String? = nil, status: String? = nil) {
            self.containerName = containerName
            self.exitCode = exitCode
            self.imageDigest = imageDigest
            self.networkBindings = networkBindings
            self.reason = reason
            self.runtimeId = runtimeId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case exitCode = "exitCode"
            case imageDigest = "imageDigest"
            case networkBindings = "networkBindings"
            case reason = "reason"
            case runtimeId = "runtimeId"
            case status = "status"
        }
    }

    public struct CreateCapacityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoScalingGroupProvider", required: true, type: .structure), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The details of the Auto Scaling group for the capacity provider.
        public let autoScalingGroupProvider: AutoScalingGroupProvider
        /// The name of the capacity provider. Up to 255 characters are allowed, including letters (upper and lowercase), numbers, underscores, and hyphens. The name cannot be prefixed with "aws", "ecs", or "fargate".
        public let name: String
        /// The metadata that you apply to the capacity provider to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?

        public init(autoScalingGroupProvider: AutoScalingGroupProvider, name: String, tags: [Tag]? = nil) {
            self.autoScalingGroupProvider = autoScalingGroupProvider
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.autoScalingGroupProvider.validate(name: "\(name).autoScalingGroupProvider")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupProvider = "autoScalingGroupProvider"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct CreateCapacityProviderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProvider", required: false, type: .structure)
        ]

        /// The full description of the new capacity provider.
        public let capacityProvider: CapacityProvider?

        public init(capacityProvider: CapacityProvider? = nil) {
            self.capacityProvider = capacityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProvider = "capacityProvider"
        }
    }

    public struct CreateClusterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviders", required: false, type: .list), 
            AWSShapeMember(label: "clusterName", required: false, type: .string), 
            AWSShapeMember(label: "defaultCapacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "settings", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The short name of one or more capacity providers to associate with the cluster. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created and not already associated with another cluster. New capacity providers can be created with the CreateCapacityProvider API operation. To use a AWS Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. The PutClusterCapacityProviders API operation is used to update the list of available capacity providers for a cluster after the cluster is created.
        public let capacityProviders: [String]?
        /// The name of your cluster. If you do not specify a name for your cluster, you create a cluster named default. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed. 
        public let clusterName: String?
        /// The capacity provider strategy to use by default for the cluster. When creating a service or running a task on a cluster, if no capacity provider or launch type is specified then the default capacity provider strategy for the cluster is used. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a AWS Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. If a default capacity provider strategy is not defined for a cluster during creation, it can be defined later with the PutClusterCapacityProviders API operation.
        public let defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The setting to use when creating a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
        public let settings: [ClusterSetting]?
        /// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?

        public init(capacityProviders: [String]? = nil, clusterName: String? = nil, defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, settings: [ClusterSetting]? = nil, tags: [Tag]? = nil) {
            self.capacityProviders = capacityProviders
            self.clusterName = clusterName
            self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
            self.settings = settings
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.defaultCapacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).defaultCapacityProviderStrategy[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviders = "capacityProviders"
            case clusterName = "clusterName"
            case defaultCapacityProviderStrategy = "defaultCapacityProviderStrategy"
            case settings = "settings"
            case tags = "tags"
        }
    }

    public struct CreateClusterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .structure)
        ]

        /// The full description of your new cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct CreateServiceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "deploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentController", required: false, type: .structure), 
            AWSShapeMember(label: "desiredCount", required: false, type: .integer), 
            AWSShapeMember(label: "enableECSManagedTags", required: false, type: .boolean), 
            AWSShapeMember(label: "healthCheckGracePeriodSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "loadBalancers", required: false, type: .list), 
            AWSShapeMember(label: "networkConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "placementConstraints", required: false, type: .list), 
            AWSShapeMember(label: "placementStrategy", required: false, type: .list), 
            AWSShapeMember(label: "platformVersion", required: false, type: .string), 
            AWSShapeMember(label: "propagateTags", required: false, type: .enum), 
            AWSShapeMember(label: "role", required: false, type: .string), 
            AWSShapeMember(label: "schedulingStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "serviceName", required: true, type: .string), 
            AWSShapeMember(label: "serviceRegistries", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: false, type: .string)
        ]

        /// The capacity provider strategy to use for the service. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a AWS Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. The PutClusterCapacityProviders API operation is used to update the list of available capacity providers for a cluster after the cluster is created.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 32 ASCII characters are allowed.
        public let clientToken: String?
        /// The short name or full Amazon Resource Name (ARN) of the cluster on which to run your service. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
        public let deploymentConfiguration: DeploymentConfiguration?
        /// The deployment controller to use for the service.
        public let deploymentController: DeploymentController?
        /// The number of instantiations of the specified task definition to place and keep running on your cluster. This is required if schedulingStrategy is REPLICA or is not specified. If schedulingStrategy is DAEMON then this is not required.
        public let desiredCount: Int?
        /// Specifies whether to enable Amazon ECS managed tags for the tasks within the service. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
        public let enableECSManagedTags: Bool?
        /// The period of time, in seconds, that the Amazon ECS service scheduler should ignore unhealthy Elastic Load Balancing target health checks after a task has first started. This is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of 0 is used. If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds. During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.
        public let healthCheckGracePeriodSeconds: Int?
        /// The launch type on which to run your service. For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide. If a launchType is specified, the capacityProviderStrategy parameter must be omitted.
        public let launchType: LaunchType?
        /// A load balancer object representing the load balancers to use with your service. For more information, see Service Load Balancing in the Amazon Elastic Container Service Developer Guide. If the service is using the rolling update (ECS) deployment controller and using either an Application Load Balancer or Network Load Balancer, you can specify multiple target groups to attach to the service. The service-linked role is required for services that make use of multiple target groups. For more information, see Using Service-Linked Roles for Amazon ECS in the Amazon Elastic Container Service Developer Guide. If the service is using the CODE_DEPLOY deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When creating an AWS CodeDeploy deployment group, you specify two target groups (referred to as a targetGroupPair). During a deployment, AWS CodeDeploy determines which task set in your service has the status PRIMARY and associates one target group with it, and then associates the other target group with the replacement task set. The load balancer can also have up to two listeners: a required listener for production traffic and an optional listener that allows you perform validation tests with Lambda functions before routing production traffic to it. After you create a service using the ECS deployment controller, the load balancer name or target group ARN, container name, and container port specified in the service definition are immutable. If you are using the CODE_DEPLOY deployment controller, these values can be changed when updating the service. For Application Load Balancers and Network Load Balancers, this object must contain the load balancer target group ARN, the container name (as it appears in a container definition), and the container port to access from the load balancer. When a task from this service is placed on a container instance, the container instance and port combination is registered as a target in the target group specified here. For Classic Load Balancers, this object must contain the load balancer name, the container name (as it appears in a container definition), and the container port to access from the load balancer. When a task from this service is placed on a container instance, the container instance is registered with the load balancer specified here. Services with tasks that use the awsvpc network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose ip as the target type, not instance, because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
        public let loadBalancers: [LoadBalancer]?
        /// The network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see Task Networking in the Amazon Elastic Container Service Developer Guide.
        public let networkConfiguration: NetworkConfiguration?
        /// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints per task (this limit includes constraints in the task definition and those specified at runtime). 
        public let placementConstraints: [PlacementConstraint]?
        /// The placement strategy objects to use for tasks in your service. You can specify a maximum of five strategy rules per service.
        public let placementStrategy: [PlacementStrategy]?
        /// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default. For more information, see AWS Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// Specifies whether to propagate the tags from the task definition or the service to the tasks in the service. If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks within the service during service creation. To add tags to a task after service creation, use the TagResource API action.
        public let propagateTags: PropagateTags?
        /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition does not use the awsvpc network mode. If you specify the role parameter, you must also specify a load balancer object with the loadBalancers parameter.  If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here. The service-linked role is required if your task definition uses the awsvpc network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you should not specify a role here. For more information, see Using Service-Linked Roles for Amazon ECS in the Amazon Elastic Container Service Developer Guide.  If your specified role has a path other than /, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name bar has a path of /foo/ then you would specify /foo/bar as the role name. For more information, see Friendly Names and Paths in the IAM User Guide.
        public let role: String?
        /// The scheduling strategy to use for the service. For more information, see Services. There are two service scheduler strategies available:    REPLICA-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service is using the CODE_DEPLOY or EXTERNAL deployment controller types.    DAEMON-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that do not meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.  Tasks using the Fargate launch type or the CODE_DEPLOY or EXTERNAL deployment controller types don't support the DAEMON scheduling strategy.   
        public let schedulingStrategy: SchedulingStrategy?
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.
        public let serviceName: String
        /// The details of the service discovery registries to assign to this service. For more information, see Service Discovery.  Service discovery is supported for Fargate tasks if you are using platform version v1.1.0 or later. For more information, see AWS Fargate Platform Versions. 
        public let serviceRegistries: [ServiceRegistry]?
        /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The family and revision (family:revision) or full ARN of the task definition to run in your service. If a revision is not specified, the latest ACTIVE revision is used. A task definition must be specified if the service is using the ECS deployment controller.
        public let taskDefinition: String?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clientToken: String? = nil, cluster: String? = nil, deploymentConfiguration: DeploymentConfiguration? = nil, deploymentController: DeploymentController? = nil, desiredCount: Int? = nil, enableECSManagedTags: Bool? = nil, healthCheckGracePeriodSeconds: Int? = nil, launchType: LaunchType? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, placementConstraints: [PlacementConstraint]? = nil, placementStrategy: [PlacementStrategy]? = nil, platformVersion: String? = nil, propagateTags: PropagateTags? = nil, role: String? = nil, schedulingStrategy: SchedulingStrategy? = nil, serviceName: String, serviceRegistries: [ServiceRegistry]? = nil, tags: [Tag]? = nil, taskDefinition: String? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clientToken = clientToken
            self.cluster = cluster
            self.deploymentConfiguration = deploymentConfiguration
            self.deploymentController = deploymentController
            self.desiredCount = desiredCount
            self.enableECSManagedTags = enableECSManagedTags
            self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.role = role
            self.schedulingStrategy = schedulingStrategy
            self.serviceName = serviceName
            self.serviceRegistries = serviceRegistries
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        public func validate(name: String) throws {
            try self.capacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).capacityProviderStrategy[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clientToken = "clientToken"
            case cluster = "cluster"
            case deploymentConfiguration = "deploymentConfiguration"
            case deploymentController = "deploymentController"
            case desiredCount = "desiredCount"
            case enableECSManagedTags = "enableECSManagedTags"
            case healthCheckGracePeriodSeconds = "healthCheckGracePeriodSeconds"
            case launchType = "launchType"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case placementConstraints = "placementConstraints"
            case placementStrategy = "placementStrategy"
            case platformVersion = "platformVersion"
            case propagateTags = "propagateTags"
            case role = "role"
            case schedulingStrategy = "schedulingStrategy"
            case serviceName = "serviceName"
            case serviceRegistries = "serviceRegistries"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct CreateServiceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "service", required: false, type: .structure)
        ]

        /// The full description of your service following the create call. If a service is using the ECS deployment controller, the deploymentController and taskSets parameters will not be returned. If the service is using the CODE_DEPLOY deployment controller, the deploymentController, taskSets and deployments parameters will be returned, however the deployments parameter will be an empty list.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "service"
        }
    }

    public struct CreateTaskSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "cluster", required: true, type: .string), 
            AWSShapeMember(label: "externalId", required: false, type: .string), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "loadBalancers", required: false, type: .list), 
            AWSShapeMember(label: "networkConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "platformVersion", required: false, type: .string), 
            AWSShapeMember(label: "scale", required: false, type: .structure), 
            AWSShapeMember(label: "service", required: true, type: .string), 
            AWSShapeMember(label: "serviceRegistries", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: true, type: .string)
        ]

        /// The capacity provider strategy to use for the task set. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a AWS Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. The PutClusterCapacityProviders API operation is used to update the list of available capacity providers for a cluster after the cluster is created.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 32 ASCII characters are allowed.
        public let clientToken: String?
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
        public let cluster: String
        /// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
        public let externalId: String?
        /// The launch type that new tasks in the task set will use. For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide. If a launchType is specified, the capacityProviderStrategy parameter must be omitted.
        public let launchType: LaunchType?
        /// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
        public let loadBalancers: [LoadBalancer]?
        public let networkConfiguration: NetworkConfiguration?
        /// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
        public let platformVersion: String?
        public let scale: Scale?
        /// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
        public let service: String
        /// The details of the service discovery registries to assign to this task set. For more information, see Service Discovery.
        public let serviceRegistries: [ServiceRegistry]?
        /// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The task definition for the tasks in the task set to use.
        public let taskDefinition: String

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clientToken: String? = nil, cluster: String, externalId: String? = nil, launchType: LaunchType? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, platformVersion: String? = nil, scale: Scale? = nil, service: String, serviceRegistries: [ServiceRegistry]? = nil, tags: [Tag]? = nil, taskDefinition: String) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clientToken = clientToken
            self.cluster = cluster
            self.externalId = externalId
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.platformVersion = platformVersion
            self.scale = scale
            self.service = service
            self.serviceRegistries = serviceRegistries
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        public func validate(name: String) throws {
            try self.capacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).capacityProviderStrategy[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clientToken = "clientToken"
            case cluster = "cluster"
            case externalId = "externalId"
            case launchType = "launchType"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case platformVersion = "platformVersion"
            case scale = "scale"
            case service = "service"
            case serviceRegistries = "serviceRegistries"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct CreateTaskSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskSet", required: false, type: .structure)
        ]

        public let taskSet: TaskSet?

        public init(taskSet: TaskSet? = nil) {
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case taskSet = "taskSet"
        }
    }

    public struct DeleteAccountSettingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .enum), 
            AWSShapeMember(label: "principalArn", required: false, type: .string)
        ]

        /// The resource name for which to disable the account setting. If serviceLongArnFormat is specified, the ARN for your Amazon ECS services is affected. If taskLongArnFormat is specified, the ARN and resource ID for your Amazon ECS tasks is affected. If containerInstanceLongArnFormat is specified, the ARN and resource ID for your Amazon ECS container instances is affected. If awsvpcTrunking is specified, the ENI limit for your Amazon ECS container instances is affected.
        public let name: SettingName
        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. If you specify the root user, it disables the account setting for all IAM users, IAM roles, and the root user of the account unless an IAM user or role explicitly overrides these settings. If this field is omitted, the setting is changed only for the authenticated user.
        public let principalArn: String?

        public init(name: SettingName, principalArn: String? = nil) {
            self.name = name
            self.principalArn = principalArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case principalArn = "principalArn"
        }
    }

    public struct DeleteAccountSettingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "setting", required: false, type: .structure)
        ]

        /// The account setting for the specified principal ARN.
        public let setting: Setting?

        public init(setting: Setting? = nil) {
            self.setting = setting
        }

        private enum CodingKeys: String, CodingKey {
            case setting = "setting"
        }
    }

    public struct DeleteAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: true, type: .list), 
            AWSShapeMember(label: "cluster", required: false, type: .string)
        ]

        /// The attributes to delete from your resource. You can specify up to 10 attributes per request. For custom attributes, specify the attribute name and target ID, but do not specify the value. If you specify the target ID using the short form, you must also specify the target type.
        public let attributes: [Attribute]
        /// The short name or full Amazon Resource Name (ARN) of the cluster that contains the resource to delete attributes. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?

        public init(attributes: [Attribute], cluster: String? = nil) {
            self.attributes = attributes
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case cluster = "cluster"
        }
    }

    public struct DeleteAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .list)
        ]

        /// A list of attribute objects that were successfully deleted from your resource.
        public let attributes: [Attribute]?

        public init(attributes: [Attribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct DeleteClusterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: true, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster to delete.
        public let cluster: String

        public init(cluster: String) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct DeleteClusterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .structure)
        ]

        /// The full description of the deleted cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct DeleteServiceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "force", required: false, type: .boolean), 
            AWSShapeMember(label: "service", required: true, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to delete. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// If true, allows you to delete a service even if it has not been scaled down to zero tasks. It is only necessary to use this if the service is using the REPLICA scheduling strategy.
        public let force: Bool?
        /// The name of the service to delete.
        public let service: String

        public init(cluster: String? = nil, force: Bool? = nil, service: String) {
            self.cluster = cluster
            self.force = force
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case force = "force"
            case service = "service"
        }
    }

    public struct DeleteServiceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "service", required: false, type: .structure)
        ]

        /// The full description of the deleted service.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "service"
        }
    }

    public struct DeleteTaskSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: true, type: .string), 
            AWSShapeMember(label: "force", required: false, type: .boolean), 
            AWSShapeMember(label: "service", required: true, type: .string), 
            AWSShapeMember(label: "taskSet", required: true, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task set exists in to delete.
        public let cluster: String
        /// If true, this allows you to delete a task set even if it hasn't been scaled down to zero.
        public let force: Bool?
        /// The short name or full Amazon Resource Name (ARN) of the service that hosts the task set to delete.
        public let service: String
        /// The task set ID or full Amazon Resource Name (ARN) of the task set to delete.
        public let taskSet: String

        public init(cluster: String, force: Bool? = nil, service: String, taskSet: String) {
            self.cluster = cluster
            self.force = force
            self.service = service
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case force = "force"
            case service = "service"
            case taskSet = "taskSet"
        }
    }

    public struct DeleteTaskSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskSet", required: false, type: .structure)
        ]

        public let taskSet: TaskSet?

        public init(taskSet: TaskSet? = nil) {
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case taskSet = "taskSet"
        }
    }

    public struct Deployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "desiredCount", required: false, type: .integer), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "networkConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "pendingCount", required: false, type: .integer), 
            AWSShapeMember(label: "platformVersion", required: false, type: .string), 
            AWSShapeMember(label: "runningCount", required: false, type: .integer), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "taskDefinition", required: false, type: .string), 
            AWSShapeMember(label: "updatedAt", required: false, type: .timestamp)
        ]

        /// The capacity provider strategy that the deployment is using.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The Unix timestamp for when the service deployment was created.
        public let createdAt: TimeStamp?
        /// The most recent desired count of tasks that was specified for the service to deploy or maintain.
        public let desiredCount: Int?
        /// The ID of the deployment.
        public let id: String?
        /// The launch type the tasks in the service are using. For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide.
        public let launchType: LaunchType?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public let networkConfiguration: NetworkConfiguration?
        /// The number of tasks in the deployment that are in the PENDING status.
        public let pendingCount: Int?
        /// The platform version on which your tasks in the service are running. A platform version is only specified for tasks using the Fargate launch type. If one is not specified, the LATEST platform version is used by default. For more information, see AWS Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// The number of tasks in the deployment that are in the RUNNING status.
        public let runningCount: Int?
        /// The status of the deployment. The following describes each state:  PRIMARY  The most recent deployment of a service.  ACTIVE  A service deployment that still has running tasks, but are in the process of being replaced with a new PRIMARY deployment.  INACTIVE  A deployment that has been completely replaced.  
        public let status: String?
        /// The most recent task definition that was specified for the tasks in the service to use.
        public let taskDefinition: String?
        /// The Unix timestamp for when the service deployment was last updated.
        public let updatedAt: TimeStamp?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, createdAt: TimeStamp? = nil, desiredCount: Int? = nil, id: String? = nil, launchType: LaunchType? = nil, networkConfiguration: NetworkConfiguration? = nil, pendingCount: Int? = nil, platformVersion: String? = nil, runningCount: Int? = nil, status: String? = nil, taskDefinition: String? = nil, updatedAt: TimeStamp? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.createdAt = createdAt
            self.desiredCount = desiredCount
            self.id = id
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.platformVersion = platformVersion
            self.runningCount = runningCount
            self.status = status
            self.taskDefinition = taskDefinition
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case createdAt = "createdAt"
            case desiredCount = "desiredCount"
            case id = "id"
            case launchType = "launchType"
            case networkConfiguration = "networkConfiguration"
            case pendingCount = "pendingCount"
            case platformVersion = "platformVersion"
            case runningCount = "runningCount"
            case status = "status"
            case taskDefinition = "taskDefinition"
            case updatedAt = "updatedAt"
        }
    }

    public struct DeploymentConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maximumPercent", required: false, type: .integer), 
            AWSShapeMember(label: "minimumHealthyPercent", required: false, type: .integer)
        ]

        /// If a service is using the rolling update (ECS) deployment type, the maximum percent parameter represents an upper limit on the number of tasks in a service that are allowed in the RUNNING or PENDING state during a deployment, as a percentage of the desired number of tasks (rounded down to the nearest integer), and while any container instances are in the DRAINING state if the service contains tasks using the EC2 launch type. This parameter enables you to define the deployment batch size. For example, if your service has a desired number of four tasks and a maximum percent value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default value for maximum percent is 200%. If a service is using the blue/green (CODE_DEPLOY) or EXTERNAL deployment types and tasks that use the EC2 launch type, the maximum percent value is set to the default value and is used to define the upper limit on the number of the tasks in the service that remain in the RUNNING state while the container instances are in the DRAINING state. If the tasks in the service use the Fargate launch type, the maximum percent value is not used, although it is returned when describing your service.
        public let maximumPercent: Int?
        /// If a service is using the rolling update (ECS) deployment type, the minimum healthy percent represents a lower limit on the number of tasks in a service that must remain in the RUNNING state during a deployment, as a percentage of the desired number of tasks (rounded up to the nearest integer), and while any container instances are in the DRAINING state if the service contains tasks using the EC2 launch type. This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a desired number of four tasks and a minimum healthy percent of 50%, the scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks. Tasks for services that do not use a load balancer are considered healthy if they are in the RUNNING state; tasks for services that do use a load balancer are considered healthy if they are in the RUNNING state and they are reported as healthy by the load balancer. The default value for minimum healthy percent is 100%. If a service is using the blue/green (CODE_DEPLOY) or EXTERNAL deployment types and tasks that use the EC2 launch type, the minimum healthy percent value is set to the default value and is used to define the lower limit on the number of the tasks in the service that remain in the RUNNING state while the container instances are in the DRAINING state. If the tasks in the service use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.
        public let minimumHealthyPercent: Int?

        public init(maximumPercent: Int? = nil, minimumHealthyPercent: Int? = nil) {
            self.maximumPercent = maximumPercent
            self.minimumHealthyPercent = minimumHealthyPercent
        }

        private enum CodingKeys: String, CodingKey {
            case maximumPercent = "maximumPercent"
            case minimumHealthyPercent = "minimumHealthyPercent"
        }
    }

    public struct DeploymentController: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum)
        ]

        /// The deployment controller type to use. There are three deployment controller types available:  ECS  The rolling update (ECS) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the DeploymentConfiguration.  CODE_DEPLOY  The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by AWS CodeDeploy, which allows you to verify a new deployment of a service before sending production traffic to it.  EXTERNAL  The external (EXTERNAL) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.  
        public let `type`: DeploymentControllerType

        public init(type: DeploymentControllerType) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
        }
    }

    public struct DeregisterContainerInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerInstance", required: true, type: .string), 
            AWSShapeMember(label: "force", required: false, type: .boolean)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to deregister. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The container instance ID or full ARN of the container instance to deregister. The ARN contains the arn:aws:ecs namespace, followed by the Region of the container instance, the AWS account ID of the container instance owner, the container-instance namespace, and then the container instance ID. For example, arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID.
        public let containerInstance: String
        /// Forces the deregistration of the container instance. If you have tasks running on the container instance when you deregister it with the force option, these tasks remain running until you terminate the instance or the tasks stop through some other means, but they are orphaned (no longer monitored or accounted for by Amazon ECS). If an orphaned task on your container instance is part of an Amazon ECS service, then the service scheduler starts another copy of that task, on a different container instance if possible.  Any containers in orphaned service tasks that are registered with a Classic Load Balancer or an Application Load Balancer target group are deregistered. They begin connection draining according to the settings on the load balancer or target group.
        public let force: Bool?

        public init(cluster: String? = nil, containerInstance: String, force: Bool? = nil) {
            self.cluster = cluster
            self.containerInstance = containerInstance
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstance = "containerInstance"
            case force = "force"
        }
    }

    public struct DeregisterContainerInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerInstance", required: false, type: .structure)
        ]

        /// The container instance that was deregistered.
        public let containerInstance: ContainerInstance?

        public init(containerInstance: ContainerInstance? = nil) {
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstance = "containerInstance"
        }
    }

    public struct DeregisterTaskDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskDefinition", required: true, type: .string)
        ]

        /// The family and revision (family:revision) or full Amazon Resource Name (ARN) of the task definition to deregister. You must specify a revision.
        public let taskDefinition: String

        public init(taskDefinition: String) {
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case taskDefinition = "taskDefinition"
        }
    }

    public struct DeregisterTaskDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskDefinition", required: false, type: .structure)
        ]

        /// The full description of the deregistered task.
        public let taskDefinition: TaskDefinition?

        public init(taskDefinition: TaskDefinition? = nil) {
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case taskDefinition = "taskDefinition"
        }
    }

    public struct DescribeCapacityProvidersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviders", required: false, type: .list), 
            AWSShapeMember(label: "include", required: false, type: .list), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of one or more capacity providers. Up to 100 capacity providers can be described in an action.
        public let capacityProviders: [String]?
        /// Specifies whether or not you want to see the resource tags for the capacity provider. If TAGS is specified, the tags are included in the response. If this field is omitted, tags are not included in the response.
        public let include: [CapacityProviderField]?
        /// The maximum number of account setting results returned by DescribeCapacityProviders in paginated output. When this parameter is used, DescribeCapacityProviders only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeCapacityProviders request with the returned nextToken value. This value can be between 1 and 10. If this parameter is not used, then DescribeCapacityProviders returns up to 10 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated DescribeCapacityProviders request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(capacityProviders: [String]? = nil, include: [CapacityProviderField]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityProviders = capacityProviders
            self.include = include
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviders = "capacityProviders"
            case include = "include"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCapacityProvidersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviders", required: false, type: .list), 
            AWSShapeMember(label: "failures", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The list of capacity providers.
        public let capacityProviders: [CapacityProvider]?
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The nextToken value to include in a future DescribeCapacityProviders request. When the results of a DescribeCapacityProviders request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityProviders: [CapacityProvider]? = nil, failures: [Failure]? = nil, nextToken: String? = nil) {
            self.capacityProviders = capacityProviders
            self.failures = failures
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviders = "capacityProviders"
            case failures = "failures"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClustersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clusters", required: false, type: .list), 
            AWSShapeMember(label: "include", required: false, type: .list)
        ]

        /// A list of up to 100 cluster names or full cluster Amazon Resource Name (ARN) entries. If you do not specify a cluster, the default cluster is assumed.
        public let clusters: [String]?
        /// Whether to include additional information about your clusters in the response. If this field is omitted, the attachments, statistics, and tags are not included. If ATTACHMENTS is specified, the attachments for the container instances or tasks within the cluster are included. If SETTINGS is specified, the settings for the cluster are included. If STATISTICS is specified, the following additional information, separated by launch type, is included:   runningEC2TasksCount   runningFargateTasksCount   pendingEC2TasksCount   pendingFargateTasksCount   activeEC2ServiceCount   activeFargateServiceCount   drainingEC2ServiceCount   drainingFargateServiceCount   If TAGS is specified, the metadata tags associated with the cluster are included.
        public let include: [ClusterField]?

        public init(clusters: [String]? = nil, include: [ClusterField]? = nil) {
            self.clusters = clusters
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case clusters = "clusters"
            case include = "include"
        }
    }

    public struct DescribeClustersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clusters", required: false, type: .list), 
            AWSShapeMember(label: "failures", required: false, type: .list)
        ]

        /// The list of clusters.
        public let clusters: [Cluster]?
        /// Any failures associated with the call.
        public let failures: [Failure]?

        public init(clusters: [Cluster]? = nil, failures: [Failure]? = nil) {
            self.clusters = clusters
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case clusters = "clusters"
            case failures = "failures"
        }
    }

    public struct DescribeContainerInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerInstances", required: true, type: .list), 
            AWSShapeMember(label: "include", required: false, type: .list)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instances to describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the container instance or container instances you are describing were launched in any cluster other than the default cluster.
        public let cluster: String?
        /// A list of up to 100 container instance IDs or full Amazon Resource Name (ARN) entries.
        public let containerInstances: [String]
        /// Specifies whether you want to see the resource tags for the container instance. If TAGS is specified, the tags are included in the response. If this field is omitted, tags are not included in the response.
        public let include: [ContainerInstanceField]?

        public init(cluster: String? = nil, containerInstances: [String], include: [ContainerInstanceField]? = nil) {
            self.cluster = cluster
            self.containerInstances = containerInstances
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstances = "containerInstances"
            case include = "include"
        }
    }

    public struct DescribeContainerInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerInstances", required: false, type: .list), 
            AWSShapeMember(label: "failures", required: false, type: .list)
        ]

        /// The list of container instances.
        public let containerInstances: [ContainerInstance]?
        /// Any failures associated with the call.
        public let failures: [Failure]?

        public init(containerInstances: [ContainerInstance]? = nil, failures: [Failure]? = nil) {
            self.containerInstances = containerInstances
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstances = "containerInstances"
            case failures = "failures"
        }
    }

    public struct DescribeServicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "include", required: false, type: .list), 
            AWSShapeMember(label: "services", required: true, type: .list)
        ]

        /// The short name or full Amazon Resource Name (ARN)the cluster that hosts the service to describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the service or services you are describing were launched in any cluster other than the default cluster.
        public let cluster: String?
        /// Specifies whether you want to see the resource tags for the service. If TAGS is specified, the tags are included in the response. If this field is omitted, tags are not included in the response.
        public let include: [ServiceField]?
        /// A list of services to describe. You may specify up to 10 services to describe in a single operation.
        public let services: [String]

        public init(cluster: String? = nil, include: [ServiceField]? = nil, services: [String]) {
            self.cluster = cluster
            self.include = include
            self.services = services
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case include = "include"
            case services = "services"
        }
    }

    public struct DescribeServicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failures", required: false, type: .list), 
            AWSShapeMember(label: "services", required: false, type: .list)
        ]

        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The list of services described.
        public let services: [Service]?

        public init(failures: [Failure]? = nil, services: [Service]? = nil) {
            self.failures = failures
            self.services = services
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case services = "services"
        }
    }

    public struct DescribeTaskDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "include", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: true, type: .string)
        ]

        /// Specifies whether to see the resource tags for the task definition. If TAGS is specified, the tags are included in the response. If this field is omitted, tags are not included in the response.
        public let include: [TaskDefinitionField]?
        /// The family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, or full Amazon Resource Name (ARN) of the task definition to describe.
        public let taskDefinition: String

        public init(include: [TaskDefinitionField]? = nil, taskDefinition: String) {
            self.include = include
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case include = "include"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct DescribeTaskDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: false, type: .structure)
        ]

        /// The metadata that is applied to the task definition to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The full task definition description.
        public let taskDefinition: TaskDefinition?

        public init(tags: [Tag]? = nil, taskDefinition: TaskDefinition? = nil) {
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct DescribeTaskSetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: true, type: .string), 
            AWSShapeMember(label: "include", required: false, type: .list), 
            AWSShapeMember(label: "service", required: true, type: .string), 
            AWSShapeMember(label: "taskSets", required: false, type: .list)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task sets exist in.
        public let cluster: String
        /// Specifies whether to see the resource tags for the task set. If TAGS is specified, the tags are included in the response. If this field is omitted, tags are not included in the response.
        public let include: [TaskSetField]?
        /// The short name or full Amazon Resource Name (ARN) of the service that the task sets exist in.
        public let service: String
        /// The ID or full Amazon Resource Name (ARN) of task sets to describe.
        public let taskSets: [String]?

        public init(cluster: String, include: [TaskSetField]? = nil, service: String, taskSets: [String]? = nil) {
            self.cluster = cluster
            self.include = include
            self.service = service
            self.taskSets = taskSets
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case include = "include"
            case service = "service"
            case taskSets = "taskSets"
        }
    }

    public struct DescribeTaskSetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failures", required: false, type: .list), 
            AWSShapeMember(label: "taskSets", required: false, type: .list)
        ]

        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The list of task sets described.
        public let taskSets: [TaskSet]?

        public init(failures: [Failure]? = nil, taskSets: [TaskSet]? = nil) {
            self.failures = failures
            self.taskSets = taskSets
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case taskSets = "taskSets"
        }
    }

    public struct DescribeTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "include", required: false, type: .list), 
            AWSShapeMember(label: "tasks", required: true, type: .list)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task or tasks to describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the task or tasks you are describing were launched in any cluster other than the default cluster.
        public let cluster: String?
        /// Specifies whether you want to see the resource tags for the task. If TAGS is specified, the tags are included in the response. If this field is omitted, tags are not included in the response.
        public let include: [TaskField]?
        /// A list of up to 100 task IDs or full ARN entries.
        public let tasks: [String]

        public init(cluster: String? = nil, include: [TaskField]? = nil, tasks: [String]) {
            self.cluster = cluster
            self.include = include
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case include = "include"
            case tasks = "tasks"
        }
    }

    public struct DescribeTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failures", required: false, type: .list), 
            AWSShapeMember(label: "tasks", required: false, type: .list)
        ]

        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The list of tasks.
        public let tasks: [Task]?

        public init(failures: [Failure]? = nil, tasks: [Task]? = nil) {
            self.failures = failures
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case tasks = "tasks"
        }
    }

    public struct Device: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerPath", required: false, type: .string), 
            AWSShapeMember(label: "hostPath", required: true, type: .string), 
            AWSShapeMember(label: "permissions", required: false, type: .list)
        ]

        /// The path inside the container at which to expose the host device.
        public let containerPath: String?
        /// The path for the device on the host container instance.
        public let hostPath: String
        /// The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and mknod for the device.
        public let permissions: [DeviceCgroupPermission]?

        public init(containerPath: String? = nil, hostPath: String, permissions: [DeviceCgroupPermission]? = nil) {
            self.containerPath = containerPath
            self.hostPath = hostPath
            self.permissions = permissions
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case hostPath = "hostPath"
            case permissions = "permissions"
        }
    }

    public struct DiscoverPollEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerInstance", required: false, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster to which the container instance belongs.
        public let cluster: String?
        /// The container instance ID or full ARN of the container instance. The ARN contains the arn:aws:ecs namespace, followed by the Region of the container instance, the AWS account ID of the container instance owner, the container-instance namespace, and then the container instance ID. For example, arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID.
        public let containerInstance: String?

        public init(cluster: String? = nil, containerInstance: String? = nil) {
            self.cluster = cluster
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstance = "containerInstance"
        }
    }

    public struct DiscoverPollEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpoint", required: false, type: .string), 
            AWSShapeMember(label: "telemetryEndpoint", required: false, type: .string)
        ]

        /// The endpoint for the Amazon ECS agent to poll.
        public let endpoint: String?
        /// The telemetry endpoint for the Amazon ECS agent.
        public let telemetryEndpoint: String?

        public init(endpoint: String? = nil, telemetryEndpoint: String? = nil) {
            self.endpoint = endpoint
            self.telemetryEndpoint = telemetryEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "endpoint"
            case telemetryEndpoint = "telemetryEndpoint"
        }
    }

    public struct DockerVolumeConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoprovision", required: false, type: .boolean), 
            AWSShapeMember(label: "driver", required: false, type: .string), 
            AWSShapeMember(label: "driverOpts", required: false, type: .map), 
            AWSShapeMember(label: "labels", required: false, type: .map), 
            AWSShapeMember(label: "scope", required: false, type: .enum)
        ]

        /// If this value is true, the Docker volume is created if it does not already exist.  This field is only used if the scope is shared. 
        public let autoprovision: Bool?
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use docker plugin ls to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see Docker plugin discovery. This parameter maps to Driver in the Create a volume section of the Docker Remote API and the xxdriver option to docker volume create.
        public let driver: String?
        /// A map of Docker driver-specific options passed through. This parameter maps to DriverOpts in the Create a volume section of the Docker Remote API and the xxopt option to docker volume create.
        public let driverOpts: [String: String]?
        /// Custom metadata to add to your Docker volume. This parameter maps to Labels in the Create a volume section of the Docker Remote API and the xxlabel option to docker volume create.
        public let labels: [String: String]?
        /// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as shared persist after the task stops.
        public let scope: Scope?

        public init(autoprovision: Bool? = nil, driver: String? = nil, driverOpts: [String: String]? = nil, labels: [String: String]? = nil, scope: Scope? = nil) {
            self.autoprovision = autoprovision
            self.driver = driver
            self.driverOpts = driverOpts
            self.labels = labels
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case autoprovision = "autoprovision"
            case driver = "driver"
            case driverOpts = "driverOpts"
            case labels = "labels"
            case scope = "scope"
        }
    }

    public struct EFSAuthorizationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accessPointId", required: false, type: .string), 
            AWSShapeMember(label: "iam", required: false, type: .enum)
        ]

        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the EFSVolumeConfiguration will be relative to the directory set for the access point. If an access point is used, transit encryption must be enabled in the EFSVolumeConfiguration. For more information, see Working with Amazon EFS Access Points in the Amazon Elastic File System User Guide.
        public let accessPointId: String?
        /// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see Using Amazon EFS Access Points in the Amazon Elastic Container Service Developer Guide.
        public let iam: EFSAuthorizationConfigIAM?

        public init(accessPointId: String? = nil, iam: EFSAuthorizationConfigIAM? = nil) {
            self.accessPointId = accessPointId
            self.iam = iam
        }

        private enum CodingKeys: String, CodingKey {
            case accessPointId = "accessPointId"
            case iam = "iam"
        }
    }

    public struct EFSVolumeConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "fileSystemId", required: true, type: .string), 
            AWSShapeMember(label: "rootDirectory", required: false, type: .string), 
            AWSShapeMember(label: "transitEncryption", required: false, type: .enum), 
            AWSShapeMember(label: "transitEncryptionPort", required: false, type: .integer)
        ]

        /// The authorization configuration details for the Amazon EFS file system.
        public let authorizationConfig: EFSAuthorizationConfig?
        /// The Amazon EFS file system ID to use.
        public let fileSystemId: String
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter.
        public let rootDirectory: String?
        /// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see Encrypting Data in Transit in the Amazon Elastic File System User Guide.
        public let transitEncryption: EFSTransitEncryption?
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see EFS Mount Helper in the Amazon Elastic File System User Guide.
        public let transitEncryptionPort: Int?

        public init(authorizationConfig: EFSAuthorizationConfig? = nil, fileSystemId: String, rootDirectory: String? = nil, transitEncryption: EFSTransitEncryption? = nil, transitEncryptionPort: Int? = nil) {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
            self.transitEncryption = transitEncryption
            self.transitEncryptionPort = transitEncryptionPort
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationConfig = "authorizationConfig"
            case fileSystemId = "fileSystemId"
            case rootDirectory = "rootDirectory"
            case transitEncryption = "transitEncryption"
            case transitEncryptionPort = "transitEncryptionPort"
        }
    }

    public struct Failure: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "detail", required: false, type: .string), 
            AWSShapeMember(label: "reason", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the failed resource.
        public let arn: String?
        /// The details of the failure.
        public let detail: String?
        /// The reason for the failure.
        public let reason: String?

        public init(arn: String? = nil, detail: String? = nil, reason: String? = nil) {
            self.arn = arn
            self.detail = detail
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case detail = "detail"
            case reason = "reason"
        }
    }

    public struct FirelensConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "options", required: false, type: .map), 
            AWSShapeMember(label: "type", required: true, type: .enum)
        ]

        /// The options to use when configuring the log router. This field is optional and can be used to specify a custom configuration file or to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event. If specified, the syntax to use is "options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}. For more information, see Creating a Task Definition that Uses a FireLens Configuration in the Amazon Elastic Container Service Developer Guide.
        public let options: [String: String]?
        /// The log router to use. The valid values are fluentd or fluentbit.
        public let `type`: FirelensConfigurationType

        public init(options: [String: String]? = nil, type: FirelensConfigurationType) {
            self.options = options
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case options = "options"
            case `type` = "type"
        }
    }

    public struct HealthCheck: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "command", required: true, type: .list), 
            AWSShapeMember(label: "interval", required: false, type: .integer), 
            AWSShapeMember(label: "retries", required: false, type: .integer), 
            AWSShapeMember(label: "startPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "timeout", required: false, type: .integer)
        ]

        /// A string array representing the command that the container runs to determine if it is healthy. The string array must start with CMD to execute the command arguments directly, or CMD-SHELL to run the command with the container's default shell. For example:  [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]  An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see HealthCheck in the Create a container section of the Docker Remote API.
        public let command: [String]
        /// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
        public let interval: Int?
        /// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.
        public let retries: Int?
        /// The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.  If a health check succeeds within the startPeriod, then the container is considered healthy and any subsequent failures count toward the maximum number of retries. 
        public let startPeriod: Int?
        /// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
        public let timeout: Int?

        public init(command: [String], interval: Int? = nil, retries: Int? = nil, startPeriod: Int? = nil, timeout: Int? = nil) {
            self.command = command
            self.interval = interval
            self.retries = retries
            self.startPeriod = startPeriod
            self.timeout = timeout
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case interval = "interval"
            case retries = "retries"
            case startPeriod = "startPeriod"
            case timeout = "timeout"
        }
    }

    public struct HostEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "hostname", required: true, type: .string), 
            AWSShapeMember(label: "ipAddress", required: true, type: .string)
        ]

        /// The hostname to use in the /etc/hosts entry.
        public let hostname: String
        /// The IP address to use in the /etc/hosts entry.
        public let ipAddress: String

        public init(hostname: String, ipAddress: String) {
            self.hostname = hostname
            self.ipAddress = ipAddress
        }

        private enum CodingKeys: String, CodingKey {
            case hostname = "hostname"
            case ipAddress = "ipAddress"
        }
    }

    public struct HostVolumeProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sourcePath", required: false, type: .string)
        ]

        /// When the host parameter is used, specify a sourcePath to declare the path on the host container instance that is presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the host parameter contains a sourcePath file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the sourcePath value does not exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported. If you are using the Fargate launch type, the sourcePath parameter is not supported.
        public let sourcePath: String?

        public init(sourcePath: String? = nil) {
            self.sourcePath = sourcePath
        }

        private enum CodingKeys: String, CodingKey {
            case sourcePath = "sourcePath"
        }
    }

    public struct InferenceAccelerator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deviceName", required: true, type: .string), 
            AWSShapeMember(label: "deviceType", required: true, type: .string)
        ]

        /// The Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
        public let deviceName: String
        /// The Elastic Inference accelerator type to use.
        public let deviceType: String

        public init(deviceName: String, deviceType: String) {
            self.deviceName = deviceName
            self.deviceType = deviceType
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case deviceType = "deviceType"
        }
    }

    public struct InferenceAcceleratorOverride: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deviceName", required: false, type: .string), 
            AWSShapeMember(label: "deviceType", required: false, type: .string)
        ]

        /// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
        public let deviceName: String?
        /// The Elastic Inference accelerator type to use.
        public let deviceType: String?

        public init(deviceName: String? = nil, deviceType: String? = nil) {
            self.deviceName = deviceName
            self.deviceType = deviceType
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case deviceType = "deviceType"
        }
    }

    public struct KernelCapabilities: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "add", required: false, type: .list), 
            AWSShapeMember(label: "drop", required: false, type: .list)
        ]

        /// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to CapAdd in the Create a container section of the Docker Remote API and the --cap-add option to docker run.  If you are using tasks that use the Fargate launch type, the add parameter is not supported.  Valid values: "ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM" 
        public let add: [String]?
        /// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to CapDrop in the Create a container section of the Docker Remote API and the --cap-drop option to docker run. Valid values: "ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM" 
        public let drop: [String]?

        public init(add: [String]? = nil, drop: [String]? = nil) {
            self.add = add
            self.drop = drop
        }

        private enum CodingKeys: String, CodingKey {
            case add = "add"
            case drop = "drop"
        }
    }

    public struct KeyValuePair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]

        /// The name of the key-value pair. For environment variables, this is the name of the environment variable.
        public let name: String?
        /// The value of the key-value pair. For environment variables, this is the value of the environment variable.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct LinuxParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capabilities", required: false, type: .structure), 
            AWSShapeMember(label: "devices", required: false, type: .list), 
            AWSShapeMember(label: "initProcessEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "maxSwap", required: false, type: .integer), 
            AWSShapeMember(label: "sharedMemorySize", required: false, type: .integer), 
            AWSShapeMember(label: "swappiness", required: false, type: .integer), 
            AWSShapeMember(label: "tmpfs", required: false, type: .list)
        ]

        /// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.  If you are using tasks that use the Fargate launch type, capabilities is supported but the add parameter is not supported. 
        public let capabilities: KernelCapabilities?
        /// Any host devices to expose to the container. This parameter maps to Devices in the Create a container section of the Docker Remote API and the --device option to docker run.  If you are using tasks that use the Fargate launch type, the devices parameter is not supported. 
        public let devices: [Device]?
        /// Run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' 
        public let initProcessEnabled: Bool?
        /// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the --memory-swap option to docker run where the value would be the sum of the container memory plus the maxSwap value. If a maxSwap value of 0 is specified, the container will not use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container will use the swap configuration for the container instance it is running on. A maxSwap value must be set for the swappiness parameter to be used.  If you are using tasks that use the Fargate launch type, the maxSwap parameter is not supported. 
        public let maxSwap: Int?
        /// The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to docker run.  If you are using tasks that use the Fargate launch type, the sharedMemorySize parameter is not supported. 
        public let sharedMemorySize: Int?
        /// This allows you to tune a container's memory swappiness behavior. A swappiness value of 0 will cause swapping to not happen unless absolutely necessary. A swappiness value of 100 will cause pages to be swapped very aggressively. Accepted values are whole numbers between 0 and 100. If the swappiness parameter is not specified, a default value of 60 is used. If a value is not specified for maxSwap then this parameter is ignored. This parameter maps to the --memory-swappiness option to docker run.  If you are using tasks that use the Fargate launch type, the swappiness parameter is not supported. 
        public let swappiness: Int?
        /// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to docker run.  If you are using tasks that use the Fargate launch type, the tmpfs parameter is not supported. 
        public let tmpfs: [Tmpfs]?

        public init(capabilities: KernelCapabilities? = nil, devices: [Device]? = nil, initProcessEnabled: Bool? = nil, maxSwap: Int? = nil, sharedMemorySize: Int? = nil, swappiness: Int? = nil, tmpfs: [Tmpfs]? = nil) {
            self.capabilities = capabilities
            self.devices = devices
            self.initProcessEnabled = initProcessEnabled
            self.maxSwap = maxSwap
            self.sharedMemorySize = sharedMemorySize
            self.swappiness = swappiness
            self.tmpfs = tmpfs
        }

        private enum CodingKeys: String, CodingKey {
            case capabilities = "capabilities"
            case devices = "devices"
            case initProcessEnabled = "initProcessEnabled"
            case maxSwap = "maxSwap"
            case sharedMemorySize = "sharedMemorySize"
            case swappiness = "swappiness"
            case tmpfs = "tmpfs"
        }
    }

    public struct ListAccountSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "effectiveSettings", required: false, type: .boolean), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "principalArn", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]

        /// Specifies whether to return the effective settings. If true, the account settings for the root user or the default setting for the principalArn are returned. If false, the account settings for the principalArn are returned if they are set. Otherwise, no account settings are returned.
        public let effectiveSettings: Bool?
        /// The maximum number of account setting results returned by ListAccountSettings in paginated output. When this parameter is used, ListAccountSettings only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListAccountSettings request with the returned nextToken value. This value can be between 1 and 10. If this parameter is not used, then ListAccountSettings returns up to 10 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The resource name you want to list the account settings for.
        public let name: SettingName?
        /// The nextToken value returned from a ListAccountSettings request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this field is omitted, the account settings are listed only for the authenticated user.
        public let principalArn: String?
        /// The value of the account settings with which to filter results. You must also specify an account setting name to use this parameter.
        public let value: String?

        public init(effectiveSettings: Bool? = nil, maxResults: Int? = nil, name: SettingName? = nil, nextToken: String? = nil, principalArn: String? = nil, value: String? = nil) {
            self.effectiveSettings = effectiveSettings
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
            self.principalArn = principalArn
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case effectiveSettings = "effectiveSettings"
            case maxResults = "maxResults"
            case name = "name"
            case nextToken = "nextToken"
            case principalArn = "principalArn"
            case value = "value"
        }
    }

    public struct ListAccountSettingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "settings", required: false, type: .list)
        ]

        /// The nextToken value to include in a future ListAccountSettings request. When the results of a ListAccountSettings request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The account settings for the resource.
        public let settings: [Setting]?

        public init(nextToken: String? = nil, settings: [Setting]? = nil) {
            self.nextToken = nextToken
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case settings = "settings"
        }
    }

    public struct ListAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeName", required: false, type: .string), 
            AWSShapeMember(label: "attributeValue", required: false, type: .string), 
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "targetType", required: true, type: .enum)
        ]

        /// The name of the attribute with which to filter the results. 
        public let attributeName: String?
        /// The value of the attribute with which to filter results. You must also specify an attribute name to use this parameter.
        public let attributeValue: String?
        /// The short name or full Amazon Resource Name (ARN) of the cluster to list attributes. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The maximum number of cluster results returned by ListAttributes in paginated output. When this parameter is used, ListAttributes only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListAttributes request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListAttributes returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListAttributes request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The type of the target with which to list attributes.
        public let targetType: TargetType

        public init(attributeName: String? = nil, attributeValue: String? = nil, cluster: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, targetType: TargetType) {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
            self.cluster = cluster
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case attributeValue = "attributeValue"
            case cluster = "cluster"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case targetType = "targetType"
        }
    }

    public struct ListAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// A list of attribute objects that meet the criteria of the request.
        public let attributes: [Attribute]?
        /// The nextToken value to include in a future ListAttributes request. When the results of a ListAttributes request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(attributes: [Attribute]? = nil, nextToken: String? = nil) {
            self.attributes = attributes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case nextToken = "nextToken"
        }
    }

    public struct ListClustersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of cluster results returned by ListClusters in paginated output. When this parameter is used, ListClusters only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListClusters request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListClusters returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListClusters request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListClustersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clusterArns", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The list of full Amazon Resource Name (ARN) entries for each cluster associated with your account.
        public let clusterArns: [String]?
        /// The nextToken value to include in a future ListClusters request. When the results of a ListClusters request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clusterArns: [String]? = nil, nextToken: String? = nil) {
            self.clusterArns = clusterArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clusterArns = "clusterArns"
            case nextToken = "nextToken"
        }
    }

    public struct ListContainerInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "filter", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instances to list. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// You can filter the results of a ListContainerInstances operation with cluster query language statements. For more information, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
        public let filter: String?
        /// The maximum number of container instance results returned by ListContainerInstances in paginated output. When this parameter is used, ListContainerInstances only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListContainerInstances request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListContainerInstances returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListContainerInstances request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// Filters the container instances by status. For example, if you specify the DRAINING status, the results include only container instances that have been set to DRAINING using UpdateContainerInstancesState. If you do not specify this parameter, the default is to include container instances set to all states other than INACTIVE.
        public let status: ContainerInstanceStatus?

        public init(cluster: String? = nil, filter: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: ContainerInstanceStatus? = nil) {
            self.cluster = cluster
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case filter = "filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case status = "status"
        }
    }

    public struct ListContainerInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerInstanceArns", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The list of container instances with full ARN entries for each container instance associated with the specified cluster.
        public let containerInstanceArns: [String]?
        /// The nextToken value to include in a future ListContainerInstances request. When the results of a ListContainerInstances request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(containerInstanceArns: [String]? = nil, nextToken: String? = nil) {
            self.containerInstanceArns = containerInstanceArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstanceArns = "containerInstanceArns"
            case nextToken = "nextToken"
        }
    }

    public struct ListServicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "schedulingStrategy", required: false, type: .enum)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the services to list. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The launch type for the services to list.
        public let launchType: LaunchType?
        /// The maximum number of service results returned by ListServices in paginated output. When this parameter is used, ListServices only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListServices request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListServices returns up to 10 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListServices request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The scheduling strategy for services to list.
        public let schedulingStrategy: SchedulingStrategy?

        public init(cluster: String? = nil, launchType: LaunchType? = nil, maxResults: Int? = nil, nextToken: String? = nil, schedulingStrategy: SchedulingStrategy? = nil) {
            self.cluster = cluster
            self.launchType = launchType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.schedulingStrategy = schedulingStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case launchType = "launchType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case schedulingStrategy = "schedulingStrategy"
        }
    }

    public struct ListServicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "serviceArns", required: false, type: .list)
        ]

        /// The nextToken value to include in a future ListServices request. When the results of a ListServices request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The list of full ARN entries for each service associated with the specified cluster.
        public let serviceArns: [String]?

        public init(nextToken: String? = nil, serviceArns: [String]? = nil) {
            self.nextToken = nextToken
            self.serviceArns = serviceArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case serviceArns = "serviceArns"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are Amazon ECS tasks, services, task definitions, clusters, and container instances.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The tags for the resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct ListTaskDefinitionFamiliesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "familyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The familyPrefix is a string that is used to filter the results of ListTaskDefinitionFamilies. If you specify a familyPrefix, only task definition family names that begin with the familyPrefix string are returned.
        public let familyPrefix: String?
        /// The maximum number of task definition family results returned by ListTaskDefinitionFamilies in paginated output. When this parameter is used, ListTaskDefinitions only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListTaskDefinitionFamilies request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListTaskDefinitionFamilies returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListTaskDefinitionFamilies request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The task definition family status with which to filter the ListTaskDefinitionFamilies results. By default, both ACTIVE and INACTIVE task definition families are listed. If this parameter is set to ACTIVE, only task definition families that have an ACTIVE task definition revision are returned. If this parameter is set to INACTIVE, only task definition families that do not have any ACTIVE task definition revisions are returned. If you paginate the resulting output, be sure to keep the status value constant in each subsequent request.
        public let status: TaskDefinitionFamilyStatus?

        public init(familyPrefix: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: TaskDefinitionFamilyStatus? = nil) {
            self.familyPrefix = familyPrefix
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case familyPrefix = "familyPrefix"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case status = "status"
        }
    }

    public struct ListTaskDefinitionFamiliesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "families", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The list of task definition family names that match the ListTaskDefinitionFamilies request.
        public let families: [String]?
        /// The nextToken value to include in a future ListTaskDefinitionFamilies request. When the results of a ListTaskDefinitionFamilies request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(families: [String]? = nil, nextToken: String? = nil) {
            self.families = families
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case families = "families"
            case nextToken = "nextToken"
        }
    }

    public struct ListTaskDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "familyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "sort", required: false, type: .enum), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The full family name with which to filter the ListTaskDefinitions results. Specifying a familyPrefix limits the listed task definitions to task definition revisions that belong to that family.
        public let familyPrefix: String?
        /// The maximum number of task definition results returned by ListTaskDefinitions in paginated output. When this parameter is used, ListTaskDefinitions only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListTaskDefinitions request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListTaskDefinitions returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListTaskDefinitions request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The order in which to sort the results. Valid values are ASC and DESC. By default (ASC), task definitions are listed lexicographically by family name and in ascending numerical order by revision so that the newest task definitions in a family are listed last. Setting this parameter to DESC reverses the sort order on family name and revision so that the newest task definitions in a family are listed first.
        public let sort: SortOrder?
        /// The task definition status with which to filter the ListTaskDefinitions results. By default, only ACTIVE task definitions are listed. By setting this parameter to INACTIVE, you can view task definitions that are INACTIVE as long as an active task or service still references them. If you paginate the resulting output, be sure to keep the status value constant in each subsequent request.
        public let status: TaskDefinitionStatus?

        public init(familyPrefix: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, sort: SortOrder? = nil, status: TaskDefinitionStatus? = nil) {
            self.familyPrefix = familyPrefix
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sort = sort
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case familyPrefix = "familyPrefix"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sort = "sort"
            case status = "status"
        }
    }

    public struct ListTaskDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "taskDefinitionArns", required: false, type: .list)
        ]

        /// The nextToken value to include in a future ListTaskDefinitions request. When the results of a ListTaskDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The list of task definition Amazon Resource Name (ARN) entries for the ListTaskDefinitions request.
        public let taskDefinitionArns: [String]?

        public init(nextToken: String? = nil, taskDefinitionArns: [String]? = nil) {
            self.nextToken = nextToken
            self.taskDefinitionArns = taskDefinitionArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case taskDefinitionArns = "taskDefinitionArns"
        }
    }

    public struct ListTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerInstance", required: false, type: .string), 
            AWSShapeMember(label: "desiredStatus", required: false, type: .enum), 
            AWSShapeMember(label: "family", required: false, type: .string), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "serviceName", required: false, type: .string), 
            AWSShapeMember(label: "startedBy", required: false, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the tasks to list. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The container instance ID or full ARN of the container instance with which to filter the ListTasks results. Specifying a containerInstance limits the results to tasks that belong to that container instance.
        public let containerInstance: String?
        /// The task desired status with which to filter the ListTasks results. Specifying a desiredStatus of STOPPED limits the results to tasks that Amazon ECS has set the desired status to STOPPED. This can be useful for debugging tasks that are not starting properly or have died or finished. The default status filter is RUNNING, which shows tasks that Amazon ECS has set the desired status to RUNNING.  Although you can filter results based on a desired status of PENDING, this does not return any results. Amazon ECS never sets the desired status of a task to that value (only a task's lastStatus may have a value of PENDING). 
        public let desiredStatus: DesiredStatus?
        /// The name of the family with which to filter the ListTasks results. Specifying a family limits the results to tasks that belong to that family.
        public let family: String?
        /// The launch type for services to list.
        public let launchType: LaunchType?
        /// The maximum number of task results returned by ListTasks in paginated output. When this parameter is used, ListTasks only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListTasks request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListTasks returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListTasks request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The name of the service with which to filter the ListTasks results. Specifying a serviceName limits the results to tasks that belong to that service.
        public let serviceName: String?
        /// The startedBy value with which to filter the task results. Specifying a startedBy value limits the results to tasks that were started with that value.
        public let startedBy: String?

        public init(cluster: String? = nil, containerInstance: String? = nil, desiredStatus: DesiredStatus? = nil, family: String? = nil, launchType: LaunchType? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceName: String? = nil, startedBy: String? = nil) {
            self.cluster = cluster
            self.containerInstance = containerInstance
            self.desiredStatus = desiredStatus
            self.family = family
            self.launchType = launchType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceName = serviceName
            self.startedBy = startedBy
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstance = "containerInstance"
            case desiredStatus = "desiredStatus"
            case family = "family"
            case launchType = "launchType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case serviceName = "serviceName"
            case startedBy = "startedBy"
        }
    }

    public struct ListTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "taskArns", required: false, type: .list)
        ]

        /// The nextToken value to include in a future ListTasks request. When the results of a ListTasks request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The list of task ARN entries for the ListTasks request.
        public let taskArns: [String]?

        public init(nextToken: String? = nil, taskArns: [String]? = nil) {
            self.nextToken = nextToken
            self.taskArns = taskArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case taskArns = "taskArns"
        }
    }

    public struct LoadBalancer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerName", required: false, type: .string), 
            AWSShapeMember(label: "containerPort", required: false, type: .integer), 
            AWSShapeMember(label: "loadBalancerName", required: false, type: .string), 
            AWSShapeMember(label: "targetGroupArn", required: false, type: .string)
        ]

        /// The name of the container (as it appears in a container definition) to associate with the load balancer.
        public let containerName: String?
        /// The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
        public let containerPort: Int?
        /// The name of the load balancer to associate with the Amazon ECS service or task set. A load balancer name is only specified when using a Classic Load Balancer. If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.
        public let loadBalancerName: String?
        /// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer the target group ARN should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see Registering Multiple Target Groups with a Service in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see Blue/Green Deployment with CodeDeploy in the Amazon Elastic Container Service Developer Guide.  If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance. 
        public let targetGroupArn: String?

        public init(containerName: String? = nil, containerPort: Int? = nil, loadBalancerName: String? = nil, targetGroupArn: String? = nil) {
            self.containerName = containerName
            self.containerPort = containerPort
            self.loadBalancerName = loadBalancerName
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case containerPort = "containerPort"
            case loadBalancerName = "loadBalancerName"
            case targetGroupArn = "targetGroupArn"
        }
    }

    public struct LogConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logDriver", required: true, type: .enum), 
            AWSShapeMember(label: "options", required: false, type: .map), 
            AWSShapeMember(label: "secretOptions", required: false, type: .list)
        ]

        /// The log driver to use for the container. The valid values listed earlier are log drivers that the Amazon ECS container agent can communicate with by default. For tasks using the Fargate launch type, the supported log drivers are awslogs, splunk, and awsfirelens. For tasks using the EC2 launch type, the supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries,syslog, splunk, and awsfirelens. For more information about using the awslogs log driver, see Using the awslogs Log Driver in the Amazon Elastic Container Service Developer Guide. For more information about using the awsfirelens log driver, see Custom Log Routing in the Amazon Elastic Container Service Developer Guide.  If you have a custom driver that is not listed, you can fork the Amazon ECS container agent project that is available on GitHub and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we do not currently provide support for running modified copies of this software. 
        public let logDriver: LogDriver
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' 
        public let options: [String: String]?
        /// The secrets to pass to the log configuration. For more information, see Specifying Sensitive Data in the Amazon Elastic Container Service Developer Guide.
        public let secretOptions: [Secret]?

        public init(logDriver: LogDriver, options: [String: String]? = nil, secretOptions: [Secret]? = nil) {
            self.logDriver = logDriver
            self.options = options
            self.secretOptions = secretOptions
        }

        private enum CodingKeys: String, CodingKey {
            case logDriver = "logDriver"
            case options = "options"
            case secretOptions = "secretOptions"
        }
    }

    public struct ManagedScaling: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maximumScalingStepSize", required: false, type: .integer), 
            AWSShapeMember(label: "minimumScalingStepSize", required: false, type: .integer), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "targetCapacity", required: false, type: .integer)
        ]

        /// The maximum number of container instances that Amazon ECS will scale in or scale out at one time. If this parameter is omitted, the default value of 10000 is used.
        public let maximumScalingStepSize: Int?
        /// The minimum number of container instances that Amazon ECS will scale in or scale out at one time. If this parameter is omitted, the default value of 1 is used.
        public let minimumScalingStepSize: Int?
        /// Whether or not to enable managed scaling for the capacity provider.
        public let status: ManagedScalingStatus?
        /// The target capacity value for the capacity provider. The specified value must be greater than 0 and less than or equal to 100. A value of 100 will result in the Amazon EC2 instances in your Auto Scaling group being completely utilized.
        public let targetCapacity: Int?

        public init(maximumScalingStepSize: Int? = nil, minimumScalingStepSize: Int? = nil, status: ManagedScalingStatus? = nil, targetCapacity: Int? = nil) {
            self.maximumScalingStepSize = maximumScalingStepSize
            self.minimumScalingStepSize = minimumScalingStepSize
            self.status = status
            self.targetCapacity = targetCapacity
        }

        public func validate(name: String) throws {
            try validate(self.maximumScalingStepSize, name:"maximumScalingStepSize", parent: name, max: 10000)
            try validate(self.maximumScalingStepSize, name:"maximumScalingStepSize", parent: name, min: 1)
            try validate(self.minimumScalingStepSize, name:"minimumScalingStepSize", parent: name, max: 10000)
            try validate(self.minimumScalingStepSize, name:"minimumScalingStepSize", parent: name, min: 1)
            try validate(self.targetCapacity, name:"targetCapacity", parent: name, max: 100)
            try validate(self.targetCapacity, name:"targetCapacity", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maximumScalingStepSize = "maximumScalingStepSize"
            case minimumScalingStepSize = "minimumScalingStepSize"
            case status = "status"
            case targetCapacity = "targetCapacity"
        }
    }

    public struct MountPoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerPath", required: false, type: .string), 
            AWSShapeMember(label: "readOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "sourceVolume", required: false, type: .string)
        ]

        /// The path on the container to mount the host volume at.
        public let containerPath: String?
        /// If this value is true, the container has read-only access to the volume. If this value is false, then the container can write to the volume. The default value is false.
        public let readOnly: Bool?
        /// The name of the volume to mount. Must be a volume name referenced in the name parameter of task definition volume.
        public let sourceVolume: String?

        public init(containerPath: String? = nil, readOnly: Bool? = nil, sourceVolume: String? = nil) {
            self.containerPath = containerPath
            self.readOnly = readOnly
            self.sourceVolume = sourceVolume
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case readOnly = "readOnly"
            case sourceVolume = "sourceVolume"
        }
    }

    public struct NetworkBinding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bindIP", required: false, type: .string), 
            AWSShapeMember(label: "containerPort", required: false, type: .integer), 
            AWSShapeMember(label: "hostPort", required: false, type: .integer), 
            AWSShapeMember(label: "protocol", required: false, type: .enum)
        ]

        /// The IP address that the container is bound to on the container instance.
        public let bindIP: String?
        /// The port number on the container that is used with the network binding.
        public let containerPort: Int?
        /// The port number on the host that is used with the network binding.
        public let hostPort: Int?
        /// The protocol used for the network binding.
        public let `protocol`: TransportProtocol?

        public init(bindIP: String? = nil, containerPort: Int? = nil, hostPort: Int? = nil, protocol: TransportProtocol? = nil) {
            self.bindIP = bindIP
            self.containerPort = containerPort
            self.hostPort = hostPort
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case bindIP = "bindIP"
            case containerPort = "containerPort"
            case hostPort = "hostPort"
            case `protocol` = "protocol"
        }
    }

    public struct NetworkConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsvpcConfiguration", required: false, type: .structure)
        ]

        /// The VPC subnets and security groups associated with a task.  All specified subnets and security groups must be from the same VPC. 
        public let awsvpcConfiguration: AwsVpcConfiguration?

        public init(awsvpcConfiguration: AwsVpcConfiguration? = nil) {
            self.awsvpcConfiguration = awsvpcConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case awsvpcConfiguration = "awsvpcConfiguration"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachmentId", required: false, type: .string), 
            AWSShapeMember(label: "ipv6Address", required: false, type: .string), 
            AWSShapeMember(label: "privateIpv4Address", required: false, type: .string)
        ]

        /// The attachment ID for the network interface.
        public let attachmentId: String?
        /// The private IPv6 address for the network interface.
        public let ipv6Address: String?
        /// The private IPv4 address for the network interface.
        public let privateIpv4Address: String?

        public init(attachmentId: String? = nil, ipv6Address: String? = nil, privateIpv4Address: String? = nil) {
            self.attachmentId = attachmentId
            self.ipv6Address = ipv6Address
            self.privateIpv4Address = privateIpv4Address
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case ipv6Address = "ipv6Address"
            case privateIpv4Address = "privateIpv4Address"
        }
    }

    public struct PlacementConstraint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expression", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum)
        ]

        /// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. For more information, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
        public let expression: String?
        /// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
        public let `type`: PlacementConstraintType?

        public init(expression: String? = nil, type: PlacementConstraintType? = nil) {
            self.expression = expression
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "expression"
            case `type` = "type"
        }
    }

    public struct PlacementStrategy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "field", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum)
        ]

        /// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
        public let field: String?
        /// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
        public let `type`: PlacementStrategyType?

        public init(field: String? = nil, type: PlacementStrategyType? = nil) {
            self.field = field
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case field = "field"
            case `type` = "type"
        }
    }

    public struct PlatformDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .enum)
        ]

        /// The ID for the GPU(s) on the container instance. The available GPU IDs can also be obtained on the container instance in the /var/lib/ecs/gpu/nvidia_gpu_info.json file.
        public let id: String
        /// The type of device that is available on the container instance. The only supported value is GPU.
        public let `type`: PlatformDeviceType

        public init(id: String, type: PlatformDeviceType) {
            self.id = id
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case `type` = "type"
        }
    }

    public struct PortMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerPort", required: false, type: .integer), 
            AWSShapeMember(label: "hostPort", required: false, type: .integer), 
            AWSShapeMember(label: "protocol", required: false, type: .enum)
        ]

        /// The port number on the container that is bound to the user-specified or automatically assigned host port. If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort. If you are using containers in a task with the bridge network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see hostPort. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.  You cannot expose the same container port for multiple protocols. An error will be returned if this is attempted. 
        public let containerPort: Int?
        /// The port number on the container instance to reserve for your container. If you are using containers in a task with the awsvpc or host network mode, the hostPort can either be left blank or set to the same value as the containerPort. If you are using containers in a task with the bridge network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the hostPort (or set it to 0) while specifying a containerPort and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version. The default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under /proc/sys/net/ipv4/ip_local_port_range. If this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 is used. Do not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range.  The default ephemeral port range from 49153 through 65535 is always used for Docker versions before 1.6.0.  The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in a running task is also reserved while the task is running (after a task stops, the host port is released). The current reserved ports are displayed in the remainingResources of DescribeContainerInstances output. A container instance can have up to 100 reserved ports at a time, including the default reserved ports. Automatically assigned ports don't count toward the 100 reserved ports limit.
        public let hostPort: Int?
        /// The protocol used for the port mapping. Valid values are tcp and udp. The default is tcp.
        public let `protocol`: TransportProtocol?

        public init(containerPort: Int? = nil, hostPort: Int? = nil, protocol: TransportProtocol? = nil) {
            self.containerPort = containerPort
            self.hostPort = hostPort
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case containerPort = "containerPort"
            case hostPort = "hostPort"
            case `protocol` = "protocol"
        }
    }

    public struct ProxyConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerName", required: true, type: .string), 
            AWSShapeMember(label: "properties", required: false, type: .list), 
            AWSShapeMember(label: "type", required: false, type: .enum)
        ]

        /// The name of the container that will serve as the App Mesh proxy.
        public let containerName: String
        /// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.    IgnoredUID - (Required) The user ID (UID) of the proxy container as defined by the user parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If IgnoredGID is specified, this field can be empty.    IgnoredGID - (Required) The group ID (GID) of the proxy container as defined by the user parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If IgnoredUID is specified, this field can be empty.    AppPorts - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the ProxyIngressPort and ProxyEgressPort.    ProxyIngressPort - (Required) Specifies the port that incoming traffic to the AppPorts is directed to.    ProxyEgressPort - (Required) Specifies the port that outgoing traffic from the AppPorts is directed to.    EgressIgnoredPorts - (Required) The egress traffic going to the specified ports is ignored and not redirected to the ProxyEgressPort. It can be an empty list.    EgressIgnoredIPs - (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the ProxyEgressPort. It can be an empty list.  
        public let properties: [KeyValuePair]?
        /// The proxy type. The only supported value is APPMESH.
        public let `type`: ProxyConfigurationType?

        public init(containerName: String, properties: [KeyValuePair]? = nil, type: ProxyConfigurationType? = nil) {
            self.containerName = containerName
            self.properties = properties
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case properties = "properties"
            case `type` = "type"
        }
    }

    public struct PutAccountSettingDefaultRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]

        /// The resource name for which to modify the account setting. If serviceLongArnFormat is specified, the ARN for your Amazon ECS services is affected. If taskLongArnFormat is specified, the ARN and resource ID for your Amazon ECS tasks is affected. If containerInstanceLongArnFormat is specified, the ARN and resource ID for your Amazon ECS container instances is affected. If awsvpcTrunking is specified, the ENI limit for your Amazon ECS container instances is affected. If containerInsights is specified, the default setting for CloudWatch Container Insights for your clusters is affected.
        public let name: SettingName
        /// The account setting value for the specified principal ARN. Accepted values are enabled and disabled.
        public let value: String

        public init(name: SettingName, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct PutAccountSettingDefaultResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "setting", required: false, type: .structure)
        ]

        public let setting: Setting?

        public init(setting: Setting? = nil) {
            self.setting = setting
        }

        private enum CodingKeys: String, CodingKey {
            case setting = "setting"
        }
    }

    public struct PutAccountSettingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .enum), 
            AWSShapeMember(label: "principalArn", required: false, type: .string), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]

        /// The Amazon ECS resource name for which to modify the account setting. If serviceLongArnFormat is specified, the ARN for your Amazon ECS services is affected. If taskLongArnFormat is specified, the ARN and resource ID for your Amazon ECS tasks is affected. If containerInstanceLongArnFormat is specified, the ARN and resource ID for your Amazon ECS container instances is affected. If awsvpcTrunking is specified, the elastic network interface (ENI) limit for your Amazon ECS container instances is affected. If containerInsights is specified, the default setting for CloudWatch Container Insights for your clusters is affected.
        public let name: SettingName
        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. If you specify the root user, it modifies the account setting for all IAM users, IAM roles, and the root user of the account unless an IAM user or role explicitly overrides these settings. If this field is omitted, the setting is changed only for the authenticated user.
        public let principalArn: String?
        /// The account setting value for the specified principal ARN. Accepted values are enabled and disabled.
        public let value: String

        public init(name: SettingName, principalArn: String? = nil, value: String) {
            self.name = name
            self.principalArn = principalArn
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case principalArn = "principalArn"
            case value = "value"
        }
    }

    public struct PutAccountSettingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "setting", required: false, type: .structure)
        ]

        /// The current account setting for a resource.
        public let setting: Setting?

        public init(setting: Setting? = nil) {
            self.setting = setting
        }

        private enum CodingKeys: String, CodingKey {
            case setting = "setting"
        }
    }

    public struct PutAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: true, type: .list), 
            AWSShapeMember(label: "cluster", required: false, type: .string)
        ]

        /// The attributes to apply to your resource. You can specify up to 10 custom attributes per resource. You can specify up to 10 attributes in a single call.
        public let attributes: [Attribute]
        /// The short name or full Amazon Resource Name (ARN) of the cluster that contains the resource to apply attributes. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?

        public init(attributes: [Attribute], cluster: String? = nil) {
            self.attributes = attributes
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case cluster = "cluster"
        }
    }

    public struct PutAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .list)
        ]

        /// The attributes applied to your resource.
        public let attributes: [Attribute]?

        public init(attributes: [Attribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct PutClusterCapacityProvidersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviders", required: true, type: .list), 
            AWSShapeMember(label: "cluster", required: true, type: .string), 
            AWSShapeMember(label: "defaultCapacityProviderStrategy", required: true, type: .list)
        ]

        /// The name of one or more capacity providers to associate with the cluster. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a AWS Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.
        public let capacityProviders: [String]
        /// The short name or full Amazon Resource Name (ARN) of the cluster to modify the capacity provider settings for. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String
        /// The capacity provider strategy to use by default for the cluster. When creating a service or running a task on a cluster, if no capacity provider or launch type is specified then the default capacity provider strategy for the cluster is used. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a AWS Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.
        public let defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]

        public init(capacityProviders: [String], cluster: String, defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]) {
            self.capacityProviders = capacityProviders
            self.cluster = cluster
            self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
        }

        public func validate(name: String) throws {
            try self.defaultCapacityProviderStrategy.forEach {
                try $0.validate(name: "\(name).defaultCapacityProviderStrategy[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviders = "capacityProviders"
            case cluster = "cluster"
            case defaultCapacityProviderStrategy = "defaultCapacityProviderStrategy"
        }
    }

    public struct PutClusterCapacityProvidersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .structure)
        ]

        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct RegisterContainerInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .list), 
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "instanceIdentityDocument", required: false, type: .string), 
            AWSShapeMember(label: "instanceIdentityDocumentSignature", required: false, type: .string), 
            AWSShapeMember(label: "platformDevices", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "totalResources", required: false, type: .list), 
            AWSShapeMember(label: "versionInfo", required: false, type: .structure)
        ]

        /// The container instance attributes that this container instance supports.
        public let attributes: [Attribute]?
        /// The short name or full Amazon Resource Name (ARN) of the cluster with which to register your container instance. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The ARN of the container instance (if it was previously registered).
        public let containerInstanceArn: String?
        /// The instance identity document for the EC2 instance to register. This document can be found by running the following command from the instance: curl http://169.254.169.254/latest/dynamic/instance-identity/document/ 
        public let instanceIdentityDocument: String?
        /// The instance identity document signature for the EC2 instance to register. This signature can be found by running the following command from the instance: curl http://169.254.169.254/latest/dynamic/instance-identity/signature/ 
        public let instanceIdentityDocumentSignature: String?
        /// The devices that are available on the container instance. The only supported device type is a GPU.
        public let platformDevices: [PlatformDevice]?
        /// The metadata that you apply to the container instance to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The resources available on the instance.
        public let totalResources: [Resource]?
        /// The version information for the Amazon ECS container agent and Docker daemon running on the container instance.
        public let versionInfo: VersionInfo?

        public init(attributes: [Attribute]? = nil, cluster: String? = nil, containerInstanceArn: String? = nil, instanceIdentityDocument: String? = nil, instanceIdentityDocumentSignature: String? = nil, platformDevices: [PlatformDevice]? = nil, tags: [Tag]? = nil, totalResources: [Resource]? = nil, versionInfo: VersionInfo? = nil) {
            self.attributes = attributes
            self.cluster = cluster
            self.containerInstanceArn = containerInstanceArn
            self.instanceIdentityDocument = instanceIdentityDocument
            self.instanceIdentityDocumentSignature = instanceIdentityDocumentSignature
            self.platformDevices = platformDevices
            self.tags = tags
            self.totalResources = totalResources
            self.versionInfo = versionInfo
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case cluster = "cluster"
            case containerInstanceArn = "containerInstanceArn"
            case instanceIdentityDocument = "instanceIdentityDocument"
            case instanceIdentityDocumentSignature = "instanceIdentityDocumentSignature"
            case platformDevices = "platformDevices"
            case tags = "tags"
            case totalResources = "totalResources"
            case versionInfo = "versionInfo"
        }
    }

    public struct RegisterContainerInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerInstance", required: false, type: .structure)
        ]

        /// The container instance that was registered.
        public let containerInstance: ContainerInstance?

        public init(containerInstance: ContainerInstance? = nil) {
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstance = "containerInstance"
        }
    }

    public struct RegisterTaskDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerDefinitions", required: true, type: .list), 
            AWSShapeMember(label: "cpu", required: false, type: .string), 
            AWSShapeMember(label: "executionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "family", required: true, type: .string), 
            AWSShapeMember(label: "inferenceAccelerators", required: false, type: .list), 
            AWSShapeMember(label: "ipcMode", required: false, type: .enum), 
            AWSShapeMember(label: "memory", required: false, type: .string), 
            AWSShapeMember(label: "networkMode", required: false, type: .enum), 
            AWSShapeMember(label: "pidMode", required: false, type: .enum), 
            AWSShapeMember(label: "placementConstraints", required: false, type: .list), 
            AWSShapeMember(label: "proxyConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "requiresCompatibilities", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "volumes", required: false, type: .list)
        ]

        /// A list of container definitions in JSON format that describe the different containers that make up your task.
        public let containerDefinitions: [ContainerDefinition]
        /// The number of CPU units used by the task. It can be expressed as an integer using CPU units, for example 1024, or as a string using vCPUs, for example 1 vCPU or 1 vcpu, in a task definition. String values are converted to an integer indicating the CPU units when the task definition is registered.  Task-level CPU and memory parameters are ignored for Windows containers. We recommend specifying container-level resources for Windows containers.  If you are using the EC2 launch type, this field is optional. Supported values are between 128 CPU units (0.125 vCPUs) and 10240 CPU units (10 vCPUs). If you are using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of supported values for the memory parameter:   256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)   512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)   1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)   2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)   4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)  
        public let cpu: String?
        /// The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
        public let executionRoleArn: String?
        /// You must specify a family for a task definition, which allows you to track multiple versions of the same task definition. The family is used as a name for your task definition. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed.
        public let family: String
        /// The Elastic Inference accelerators to use for the containers in the task.
        public let inferenceAccelerators: [InferenceAccelerator]?
        /// The IPC resource namespace to use for the containers in the task. The valid values are host, task, or none. If host is specified, then all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same IPC resources. If none is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see IPC settings in the Docker run reference. If the host IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see Docker security. If you are setting namespaced kernel parameters using systemControls for the containers in the task, the following will apply to your IPC resource namespace. For more information, see System Controls in the Amazon Elastic Container Service Developer Guide.   For tasks that use the host IPC mode, IPC namespace related systemControls are not supported.   For tasks that use the task IPC mode, IPC namespace related systemControls will apply to all containers within a task.    This parameter is not supported for Windows containers or tasks using the Fargate launch type. 
        public let ipcMode: IpcMode?
        /// The amount of memory (in MiB) used by the task. It can be expressed as an integer using MiB, for example 1024, or as a string using GB, for example 1GB or 1 GB, in a task definition. String values are converted to an integer indicating the MiB when the task definition is registered.  Task-level CPU and memory parameters are ignored for Windows containers. We recommend specifying container-level resources for Windows containers.  If using the EC2 launch type, this field is optional. If using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of supported values for the cpu parameter:   512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)   1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)   2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)   Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)   Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)  
        public let memory: String?
        /// The Docker networking mode to use for the containers in the task. The valid values are none, bridge, awsvpc, and host. The default Docker network mode is bridge. If you are using the Fargate launch type, the awsvpc network mode is required. If you are using the EC2 launch type, any network mode can be used. If the network mode is set to none, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The host and awsvpc network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the bridge mode. With the host and awsvpc network modes, exposed container ports are mapped directly to the corresponding host port (for the host network mode) or the attached elastic network interface port (for the awsvpc network mode), so you cannot take advantage of dynamic host port mappings.  If the network mode is awsvpc, the task is allocated an elastic network interface, and you must specify a NetworkConfiguration value when you create a service or run a task with the task definition. For more information, see Task Networking in the Amazon Elastic Container Service Developer Guide.  Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the ecs-init package, or AWS Fargate infrastructure support the awsvpc network mode.   If the network mode is host, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used. Docker for Windows uses different network modes than Docker for Linux. When you register a task definition with Windows containers, you must not specify a network mode. If you use the console to register a task definition with Windows containers, you must choose the &lt;default&gt; network mode object.  For more information, see Network settings in the Docker run reference.
        public let networkMode: NetworkMode?
        /// The process namespace to use for the containers in the task. The valid values are host or task. If host is specified, then all containers within the tasks that specified the host PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace. For more information, see PID settings in the Docker run reference. If the host PID mode is used, be aware that there is a heightened risk of undesired process namespace expose. For more information, see Docker security.  This parameter is not supported for Windows containers or tasks using the Fargate launch type. 
        public let pidMode: PidMode?
        /// An array of placement constraint objects to use for the task. You can specify a maximum of 10 constraints per task (this limit includes constraints in the task definition and those specified at runtime).
        public let placementConstraints: [TaskDefinitionPlacementConstraint]?
        public let proxyConfiguration: ProxyConfiguration?
        /// The launch type required by the task. If no value is specified, it defaults to EC2.
        public let requiresCompatibilities: [Compatibility]?
        /// The metadata that you apply to the task definition to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The short name or full Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role. For more information, see IAM Roles for Tasks in the Amazon Elastic Container Service Developer Guide.
        public let taskRoleArn: String?
        /// A list of volume definitions in JSON format that containers in your task may use.
        public let volumes: [Volume]?

        public init(containerDefinitions: [ContainerDefinition], cpu: String? = nil, executionRoleArn: String? = nil, family: String, inferenceAccelerators: [InferenceAccelerator]? = nil, ipcMode: IpcMode? = nil, memory: String? = nil, networkMode: NetworkMode? = nil, pidMode: PidMode? = nil, placementConstraints: [TaskDefinitionPlacementConstraint]? = nil, proxyConfiguration: ProxyConfiguration? = nil, requiresCompatibilities: [Compatibility]? = nil, tags: [Tag]? = nil, taskRoleArn: String? = nil, volumes: [Volume]? = nil) {
            self.containerDefinitions = containerDefinitions
            self.cpu = cpu
            self.executionRoleArn = executionRoleArn
            self.family = family
            self.inferenceAccelerators = inferenceAccelerators
            self.ipcMode = ipcMode
            self.memory = memory
            self.networkMode = networkMode
            self.pidMode = pidMode
            self.placementConstraints = placementConstraints
            self.proxyConfiguration = proxyConfiguration
            self.requiresCompatibilities = requiresCompatibilities
            self.tags = tags
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case containerDefinitions = "containerDefinitions"
            case cpu = "cpu"
            case executionRoleArn = "executionRoleArn"
            case family = "family"
            case inferenceAccelerators = "inferenceAccelerators"
            case ipcMode = "ipcMode"
            case memory = "memory"
            case networkMode = "networkMode"
            case pidMode = "pidMode"
            case placementConstraints = "placementConstraints"
            case proxyConfiguration = "proxyConfiguration"
            case requiresCompatibilities = "requiresCompatibilities"
            case tags = "tags"
            case taskRoleArn = "taskRoleArn"
            case volumes = "volumes"
        }
    }

    public struct RegisterTaskDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: false, type: .structure)
        ]

        /// The list of tags associated with the task definition.
        public let tags: [Tag]?
        /// The full description of the registered task definition.
        public let taskDefinition: TaskDefinition?

        public init(tags: [Tag]? = nil, taskDefinition: TaskDefinition? = nil) {
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct RepositoryCredentials: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "credentialsParameter", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.  When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in the same Region as the task that you are launching then you can use either the full ARN or the name of the secret. When you are using the AWS Management Console, you must specify the full ARN of the secret. 
        public let credentialsParameter: String

        public init(credentialsParameter: String) {
            self.credentialsParameter = credentialsParameter
        }

        private enum CodingKeys: String, CodingKey {
            case credentialsParameter = "credentialsParameter"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "doubleValue", required: false, type: .double), 
            AWSShapeMember(label: "integerValue", required: false, type: .integer), 
            AWSShapeMember(label: "longValue", required: false, type: .long), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "stringSetValue", required: false, type: .list), 
            AWSShapeMember(label: "type", required: false, type: .string)
        ]

        /// When the doubleValue type is set, the value of the resource must be a double precision floating-point type.
        public let doubleValue: Double?
        /// When the integerValue type is set, the value of the resource must be an integer.
        public let integerValue: Int?
        /// When the longValue type is set, the value of the resource must be an extended precision floating-point type.
        public let longValue: Int64?
        /// The name of the resource, such as CPU, MEMORY, PORTS, PORTS_UDP, or a user-defined resource.
        public let name: String?
        /// When the stringSetValue type is set, the value of the resource must be a string type.
        public let stringSetValue: [String]?
        /// The type of the resource, such as INTEGER, DOUBLE, LONG, or STRINGSET.
        public let `type`: String?

        public init(doubleValue: Double? = nil, integerValue: Int? = nil, longValue: Int64? = nil, name: String? = nil, stringSetValue: [String]? = nil, type: String? = nil) {
            self.doubleValue = doubleValue
            self.integerValue = integerValue
            self.longValue = longValue
            self.name = name
            self.stringSetValue = stringSetValue
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case doubleValue = "doubleValue"
            case integerValue = "integerValue"
            case longValue = "longValue"
            case name = "name"
            case stringSetValue = "stringSetValue"
            case `type` = "type"
        }
    }

    public struct ResourceRequirement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]

        /// The type of resource to assign to a container. The supported values are GPU or InferenceAccelerator.
        public let `type`: ResourceType
        /// The value for the specified resource type. If the GPU type is used, the value is the number of physical GPUs the Amazon ECS container agent will reserve for the container. The number of GPUs reserved for all containers in a task should not exceed the number of available GPUs on the container instance the task is launched on. If the InferenceAccelerator type is used, the value should match the deviceName for an InferenceAccelerator specified in a task definition.
        public let value: String

        public init(type: ResourceType, value: String) {
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case value = "value"
        }
    }

    public struct RunTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "count", required: false, type: .integer), 
            AWSShapeMember(label: "enableECSManagedTags", required: false, type: .boolean), 
            AWSShapeMember(label: "group", required: false, type: .string), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "networkConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "overrides", required: false, type: .structure), 
            AWSShapeMember(label: "placementConstraints", required: false, type: .list), 
            AWSShapeMember(label: "placementStrategy", required: false, type: .list), 
            AWSShapeMember(label: "platformVersion", required: false, type: .string), 
            AWSShapeMember(label: "propagateTags", required: false, type: .enum), 
            AWSShapeMember(label: "referenceId", required: false, type: .string), 
            AWSShapeMember(label: "startedBy", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: true, type: .string)
        ]

        /// The capacity provider strategy to use for the task. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a AWS Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. The PutClusterCapacityProviders API operation is used to update the list of available capacity providers for a cluster after the cluster is created.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The short name or full Amazon Resource Name (ARN) of the cluster on which to run your task. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The number of instantiations of the specified task to place on your cluster. You can specify up to 10 tasks per call.
        public let count: Int?
        /// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
        public let enableECSManagedTags: Bool?
        /// The name of the task group to associate with the task. The default value is the family name of the task definition (for example, family:my-family-name).
        public let group: String?
        /// The launch type on which to run your task. For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide. If a launchType is specified, the capacityProviderStrategy parameter must be omitted.
        public let launchType: LaunchType?
        /// The network configuration for the task. This parameter is required for task definitions that use the awsvpc network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see Task Networking in the Amazon Elastic Container Service Developer Guide.
        public let networkConfiguration: NetworkConfiguration?
        /// A list of container overrides in JSON format that specify the name of a container in the specified task definition and the overrides it should receive. You can override the default command for a container (that is specified in the task definition or Docker image) with a command override. You can also override existing environment variables (that are specified in the task definition or Docker image) on a container or add new environment variables to it with an environment override.  A total of 8192 characters are allowed for overrides. This limit includes the JSON formatting characters of the override structure. 
        public let overrides: TaskOverride?
        /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
        public let placementConstraints: [PlacementConstraint]?
        /// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
        public let placementStrategy: [PlacementStrategy]?
        /// The platform version the task should run. A platform version is only specified for tasks using the Fargate launch type. If one is not specified, the LATEST platform version is used by default. For more information, see AWS Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.  An error will be received if you specify the SERVICE option when running a task. 
        public let propagateTags: PropagateTags?
        /// The reference ID to use for the task.
        public let referenceId: String?
        /// An optional tag specified when a task is started. For example, if you automatically trigger a task to run a batch process job, you could apply a unique identifier for that job to your task with the startedBy parameter. You can then identify which tasks belong to that job by filtering the results of a ListTasks call with the startedBy value. Up to 36 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. If a task is started by an Amazon ECS service, then the startedBy parameter contains the deployment ID of the service that starts it.
        public let startedBy: String?
        /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The family and revision (family:revision) or full ARN of the task definition to run. If a revision is not specified, the latest ACTIVE revision is used.
        public let taskDefinition: String

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, cluster: String? = nil, count: Int? = nil, enableECSManagedTags: Bool? = nil, group: String? = nil, launchType: LaunchType? = nil, networkConfiguration: NetworkConfiguration? = nil, overrides: TaskOverride? = nil, placementConstraints: [PlacementConstraint]? = nil, placementStrategy: [PlacementStrategy]? = nil, platformVersion: String? = nil, propagateTags: PropagateTags? = nil, referenceId: String? = nil, startedBy: String? = nil, tags: [Tag]? = nil, taskDefinition: String) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.cluster = cluster
            self.count = count
            self.enableECSManagedTags = enableECSManagedTags
            self.group = group
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.overrides = overrides
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.referenceId = referenceId
            self.startedBy = startedBy
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        public func validate(name: String) throws {
            try self.capacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).capacityProviderStrategy[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case cluster = "cluster"
            case count = "count"
            case enableECSManagedTags = "enableECSManagedTags"
            case group = "group"
            case launchType = "launchType"
            case networkConfiguration = "networkConfiguration"
            case overrides = "overrides"
            case placementConstraints = "placementConstraints"
            case placementStrategy = "placementStrategy"
            case platformVersion = "platformVersion"
            case propagateTags = "propagateTags"
            case referenceId = "referenceId"
            case startedBy = "startedBy"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct RunTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failures", required: false, type: .list), 
            AWSShapeMember(label: "tasks", required: false, type: .list)
        ]

        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// A full description of the tasks that were run. The tasks that were successfully placed on your cluster are described here.
        public let tasks: [Task]?

        public init(failures: [Failure]? = nil, tasks: [Task]? = nil) {
            self.failures = failures
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case tasks = "tasks"
        }
    }

    public struct Scale: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "unit", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .double)
        ]

        /// The unit of measure for the scale value.
        public let unit: ScaleUnit?
        /// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
        public let value: Double?

        public init(unit: ScaleUnit? = nil, value: Double? = nil) {
            self.unit = unit
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "unit"
            case value = "value"
        }
    }

    public struct Secret: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "valueFrom", required: true, type: .string)
        ]

        /// The name of the secret.
        public let name: String
        /// The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems Manager Parameter Store.  If the AWS Systems Manager Parameter Store parameter exists in the same Region as the task you are launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified. 
        public let valueFrom: String

        public init(name: String, valueFrom: String) {
            self.name = name
            self.valueFrom = valueFrom
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case valueFrom = "valueFrom"
        }
    }

    public struct Service: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "clusterArn", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdBy", required: false, type: .string), 
            AWSShapeMember(label: "deploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentController", required: false, type: .structure), 
            AWSShapeMember(label: "deployments", required: false, type: .list), 
            AWSShapeMember(label: "desiredCount", required: false, type: .integer), 
            AWSShapeMember(label: "enableECSManagedTags", required: false, type: .boolean), 
            AWSShapeMember(label: "events", required: false, type: .list), 
            AWSShapeMember(label: "healthCheckGracePeriodSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "loadBalancers", required: false, type: .list), 
            AWSShapeMember(label: "networkConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "pendingCount", required: false, type: .integer), 
            AWSShapeMember(label: "placementConstraints", required: false, type: .list), 
            AWSShapeMember(label: "placementStrategy", required: false, type: .list), 
            AWSShapeMember(label: "platformVersion", required: false, type: .string), 
            AWSShapeMember(label: "propagateTags", required: false, type: .enum), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "runningCount", required: false, type: .integer), 
            AWSShapeMember(label: "schedulingStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "serviceArn", required: false, type: .string), 
            AWSShapeMember(label: "serviceName", required: false, type: .string), 
            AWSShapeMember(label: "serviceRegistries", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: false, type: .string), 
            AWSShapeMember(label: "taskSets", required: false, type: .list)
        ]

        /// The capacity provider strategy associated with the service.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The Amazon Resource Name (ARN) of the cluster that hosts the service.
        public let clusterArn: String?
        /// The Unix timestamp for when the service was created.
        public let createdAt: TimeStamp?
        /// The principal that created the service.
        public let createdBy: String?
        /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
        public let deploymentConfiguration: DeploymentConfiguration?
        /// The deployment controller type the service is using. When using the DescribeServices API, this field is omitted if the service is using the ECS deployment controller type.
        public let deploymentController: DeploymentController?
        /// The current state of deployments for the service.
        public let deployments: [Deployment]?
        /// The desired number of instantiations of the task definition to keep running on the service. This value is specified when the service is created with CreateService, and it can be modified with UpdateService.
        public let desiredCount: Int?
        /// Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
        public let enableECSManagedTags: Bool?
        /// The event stream for your service. A maximum of 100 of the latest events are displayed.
        public let events: [ServiceEvent]?
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.
        public let healthCheckGracePeriodSeconds: Int?
        /// The launch type on which your service is running. If no value is specified, it will default to EC2. Valid values include EC2 and FARGATE. For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide.
        public let launchType: LaunchType?
        /// A list of Elastic Load Balancing load balancer objects, containing the load balancer name, the container name (as it appears in a container definition), and the container port to access from the load balancer.
        public let loadBalancers: [LoadBalancer]?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public let networkConfiguration: NetworkConfiguration?
        /// The number of tasks in the cluster that are in the PENDING state.
        public let pendingCount: Int?
        /// The placement constraints for the tasks in the service.
        public let placementConstraints: [PlacementConstraint]?
        /// The placement strategy that determines how tasks for the service are placed.
        public let placementStrategy: [PlacementStrategy]?
        /// The platform version on which to run your service. A platform version is only specified for tasks using the Fargate launch type. If one is not specified, the LATEST platform version is used by default. For more information, see AWS Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// Specifies whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags are not propagated.
        public let propagateTags: PropagateTags?
        /// The ARN of the IAM role associated with the service that allows the Amazon ECS container agent to register container instances with an Elastic Load Balancing load balancer.
        public let roleArn: String?
        /// The number of tasks in the cluster that are in the RUNNING state.
        public let runningCount: Int?
        /// The scheduling strategy to use for the service. For more information, see Services. There are two service scheduler strategies available:    REPLICA-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions.    DAEMON-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that do not meet the placement constraints.  Fargate tasks do not support the DAEMON scheduling strategy.   
        public let schedulingStrategy: SchedulingStrategy?
        /// The ARN that identifies the service. The ARN contains the arn:aws:ecs namespace, followed by the Region of the service, the AWS account ID of the service owner, the service namespace, and then the service name. For example, arn:aws:ecs:region:012345678910:service/my-service.
        public let serviceArn: String?
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.
        public let serviceName: String?
        /// The details of the service discovery registries to assign to this service. For more information, see Service Discovery.
        public let serviceRegistries: [ServiceRegistry]?
        /// The status of the service. The valid values are ACTIVE, DRAINING, or INACTIVE.
        public let status: String?
        /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The task definition to use for tasks in the service. This value is specified when the service is created with CreateService, and it can be modified with UpdateService.
        public let taskDefinition: String?
        /// Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an EXTERNAL deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.
        public let taskSets: [TaskSet]?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clusterArn: String? = nil, createdAt: TimeStamp? = nil, createdBy: String? = nil, deploymentConfiguration: DeploymentConfiguration? = nil, deploymentController: DeploymentController? = nil, deployments: [Deployment]? = nil, desiredCount: Int? = nil, enableECSManagedTags: Bool? = nil, events: [ServiceEvent]? = nil, healthCheckGracePeriodSeconds: Int? = nil, launchType: LaunchType? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, pendingCount: Int? = nil, placementConstraints: [PlacementConstraint]? = nil, placementStrategy: [PlacementStrategy]? = nil, platformVersion: String? = nil, propagateTags: PropagateTags? = nil, roleArn: String? = nil, runningCount: Int? = nil, schedulingStrategy: SchedulingStrategy? = nil, serviceArn: String? = nil, serviceName: String? = nil, serviceRegistries: [ServiceRegistry]? = nil, status: String? = nil, tags: [Tag]? = nil, taskDefinition: String? = nil, taskSets: [TaskSet]? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clusterArn = clusterArn
            self.createdAt = createdAt
            self.createdBy = createdBy
            self.deploymentConfiguration = deploymentConfiguration
            self.deploymentController = deploymentController
            self.deployments = deployments
            self.desiredCount = desiredCount
            self.enableECSManagedTags = enableECSManagedTags
            self.events = events
            self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.roleArn = roleArn
            self.runningCount = runningCount
            self.schedulingStrategy = schedulingStrategy
            self.serviceArn = serviceArn
            self.serviceName = serviceName
            self.serviceRegistries = serviceRegistries
            self.status = status
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.taskSets = taskSets
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clusterArn = "clusterArn"
            case createdAt = "createdAt"
            case createdBy = "createdBy"
            case deploymentConfiguration = "deploymentConfiguration"
            case deploymentController = "deploymentController"
            case deployments = "deployments"
            case desiredCount = "desiredCount"
            case enableECSManagedTags = "enableECSManagedTags"
            case events = "events"
            case healthCheckGracePeriodSeconds = "healthCheckGracePeriodSeconds"
            case launchType = "launchType"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case pendingCount = "pendingCount"
            case placementConstraints = "placementConstraints"
            case placementStrategy = "placementStrategy"
            case platformVersion = "platformVersion"
            case propagateTags = "propagateTags"
            case roleArn = "roleArn"
            case runningCount = "runningCount"
            case schedulingStrategy = "schedulingStrategy"
            case serviceArn = "serviceArn"
            case serviceName = "serviceName"
            case serviceRegistries = "serviceRegistries"
            case status = "status"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
            case taskSets = "taskSets"
        }
    }

    public struct ServiceEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "message", required: false, type: .string)
        ]

        /// The Unix timestamp for when the event was triggered.
        public let createdAt: TimeStamp?
        /// The ID string of the event.
        public let id: String?
        /// The event message.
        public let message: String?

        public init(createdAt: TimeStamp? = nil, id: String? = nil, message: String? = nil) {
            self.createdAt = createdAt
            self.id = id
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case id = "id"
            case message = "message"
        }
    }

    public struct ServiceRegistry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerName", required: false, type: .string), 
            AWSShapeMember(label: "containerPort", required: false, type: .integer), 
            AWSShapeMember(label: "port", required: false, type: .integer), 
            AWSShapeMember(label: "registryArn", required: false, type: .string)
        ]

        /// The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
        public let containerName: String?
        /// The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
        public let containerPort: Int?
        /// The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
        public let port: Int?
        /// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see CreateService.
        public let registryArn: String?

        public init(containerName: String? = nil, containerPort: Int? = nil, port: Int? = nil, registryArn: String? = nil) {
            self.containerName = containerName
            self.containerPort = containerPort
            self.port = port
            self.registryArn = registryArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case containerPort = "containerPort"
            case port = "port"
            case registryArn = "registryArn"
        }
    }

    public struct Setting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .enum), 
            AWSShapeMember(label: "principalArn", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]

        /// The Amazon ECS resource name.
        public let name: SettingName?
        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this field is omitted, the authenticated user is assumed.
        public let principalArn: String?
        /// Whether the account setting is enabled or disabled for the specified resource.
        public let value: String?

        public init(name: SettingName? = nil, principalArn: String? = nil, value: String? = nil) {
            self.name = name
            self.principalArn = principalArn
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case principalArn = "principalArn"
            case value = "value"
        }
    }

    public struct StartTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerInstances", required: true, type: .list), 
            AWSShapeMember(label: "enableECSManagedTags", required: false, type: .boolean), 
            AWSShapeMember(label: "group", required: false, type: .string), 
            AWSShapeMember(label: "networkConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "overrides", required: false, type: .structure), 
            AWSShapeMember(label: "propagateTags", required: false, type: .enum), 
            AWSShapeMember(label: "referenceId", required: false, type: .string), 
            AWSShapeMember(label: "startedBy", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: true, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster on which to start your task. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The container instance IDs or full ARN entries for the container instances on which you would like to place your task. You can specify up to 10 container instances.
        public let containerInstances: [String]
        /// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
        public let enableECSManagedTags: Bool?
        /// The name of the task group to associate with the task. The default value is the family name of the task definition (for example, family:my-family-name).
        public let group: String?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public let networkConfiguration: NetworkConfiguration?
        /// A list of container overrides in JSON format that specify the name of a container in the specified task definition and the overrides it should receive. You can override the default command for a container (that is specified in the task definition or Docker image) with a command override. You can also override existing environment variables (that are specified in the task definition or Docker image) on a container or add new environment variables to it with an environment override.  A total of 8192 characters are allowed for overrides. This limit includes the JSON formatting characters of the override structure. 
        public let overrides: TaskOverride?
        /// Specifies whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags are not propagated.
        public let propagateTags: PropagateTags?
        /// The reference ID to use for the task.
        public let referenceId: String?
        /// An optional tag specified when a task is started. For example, if you automatically trigger a task to run a batch process job, you could apply a unique identifier for that job to your task with the startedBy parameter. You can then identify which tasks belong to that job by filtering the results of a ListTasks call with the startedBy value. Up to 36 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. If a task is started by an Amazon ECS service, then the startedBy parameter contains the deployment ID of the service that starts it.
        public let startedBy: String?
        /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The family and revision (family:revision) or full ARN of the task definition to start. If a revision is not specified, the latest ACTIVE revision is used.
        public let taskDefinition: String

        public init(cluster: String? = nil, containerInstances: [String], enableECSManagedTags: Bool? = nil, group: String? = nil, networkConfiguration: NetworkConfiguration? = nil, overrides: TaskOverride? = nil, propagateTags: PropagateTags? = nil, referenceId: String? = nil, startedBy: String? = nil, tags: [Tag]? = nil, taskDefinition: String) {
            self.cluster = cluster
            self.containerInstances = containerInstances
            self.enableECSManagedTags = enableECSManagedTags
            self.group = group
            self.networkConfiguration = networkConfiguration
            self.overrides = overrides
            self.propagateTags = propagateTags
            self.referenceId = referenceId
            self.startedBy = startedBy
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstances = "containerInstances"
            case enableECSManagedTags = "enableECSManagedTags"
            case group = "group"
            case networkConfiguration = "networkConfiguration"
            case overrides = "overrides"
            case propagateTags = "propagateTags"
            case referenceId = "referenceId"
            case startedBy = "startedBy"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct StartTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failures", required: false, type: .list), 
            AWSShapeMember(label: "tasks", required: false, type: .list)
        ]

        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// A full description of the tasks that were started. Each task that was successfully placed on your container instances is described.
        public let tasks: [Task]?

        public init(failures: [Failure]? = nil, tasks: [Task]? = nil) {
            self.failures = failures
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case tasks = "tasks"
        }
    }

    public struct StopTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "task", required: true, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task to stop. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// An optional message specified when a task is stopped. For example, if you are using a custom scheduler, you can use this parameter to specify the reason for stopping the task here, and the message appears in subsequent DescribeTasks API operations on this task. Up to 255 characters are allowed in this message.
        public let reason: String?
        /// The task ID or full Amazon Resource Name (ARN) of the task to stop.
        public let task: String

        public init(cluster: String? = nil, reason: String? = nil, task: String) {
            self.cluster = cluster
            self.reason = reason
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case reason = "reason"
            case task = "task"
        }
    }

    public struct StopTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "task", required: false, type: .structure)
        ]

        /// The task that was stopped.
        public let task: Task?

        public init(task: Task? = nil) {
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case task = "task"
        }
    }

    public struct SubmitAttachmentStateChangesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachments", required: true, type: .list), 
            AWSShapeMember(label: "cluster", required: false, type: .string)
        ]

        /// Any attachments associated with the state change request.
        public let attachments: [AttachmentStateChange]
        /// The short name or full ARN of the cluster that hosts the container instance the attachment belongs to.
        public let cluster: String?

        public init(attachments: [AttachmentStateChange], cluster: String? = nil) {
            self.attachments = attachments
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachments"
            case cluster = "cluster"
        }
    }

    public struct SubmitAttachmentStateChangesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "acknowledgment", required: false, type: .string)
        ]

        /// Acknowledgement of the state change.
        public let acknowledgment: String?

        public init(acknowledgment: String? = nil) {
            self.acknowledgment = acknowledgment
        }

        private enum CodingKeys: String, CodingKey {
            case acknowledgment = "acknowledgment"
        }
    }

    public struct SubmitContainerStateChangeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerName", required: false, type: .string), 
            AWSShapeMember(label: "exitCode", required: false, type: .integer), 
            AWSShapeMember(label: "networkBindings", required: false, type: .list), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "runtimeId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "task", required: false, type: .string)
        ]

        /// The short name or full ARN of the cluster that hosts the container.
        public let cluster: String?
        /// The name of the container.
        public let containerName: String?
        /// The exit code returned for the state change request.
        public let exitCode: Int?
        /// The network bindings of the container.
        public let networkBindings: [NetworkBinding]?
        /// The reason for the state change request.
        public let reason: String?
        /// The ID of the Docker container.
        public let runtimeId: String?
        /// The status of the state change request.
        public let status: String?
        /// The task ID or full Amazon Resource Name (ARN) of the task that hosts the container.
        public let task: String?

        public init(cluster: String? = nil, containerName: String? = nil, exitCode: Int? = nil, networkBindings: [NetworkBinding]? = nil, reason: String? = nil, runtimeId: String? = nil, status: String? = nil, task: String? = nil) {
            self.cluster = cluster
            self.containerName = containerName
            self.exitCode = exitCode
            self.networkBindings = networkBindings
            self.reason = reason
            self.runtimeId = runtimeId
            self.status = status
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerName = "containerName"
            case exitCode = "exitCode"
            case networkBindings = "networkBindings"
            case reason = "reason"
            case runtimeId = "runtimeId"
            case status = "status"
            case task = "task"
        }
    }

    public struct SubmitContainerStateChangeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "acknowledgment", required: false, type: .string)
        ]

        /// Acknowledgement of the state change.
        public let acknowledgment: String?

        public init(acknowledgment: String? = nil) {
            self.acknowledgment = acknowledgment
        }

        private enum CodingKeys: String, CodingKey {
            case acknowledgment = "acknowledgment"
        }
    }

    public struct SubmitTaskStateChangeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachments", required: false, type: .list), 
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containers", required: false, type: .list), 
            AWSShapeMember(label: "executionStoppedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "pullStartedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "pullStoppedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "task", required: false, type: .string)
        ]

        /// Any attachments associated with the state change request.
        public let attachments: [AttachmentStateChange]?
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task.
        public let cluster: String?
        /// Any containers associated with the state change request.
        public let containers: [ContainerStateChange]?
        /// The Unix timestamp for when the task execution stopped.
        public let executionStoppedAt: TimeStamp?
        /// The Unix timestamp for when the container image pull began.
        public let pullStartedAt: TimeStamp?
        /// The Unix timestamp for when the container image pull completed.
        public let pullStoppedAt: TimeStamp?
        /// The reason for the state change request.
        public let reason: String?
        /// The status of the state change request.
        public let status: String?
        /// The task ID or full ARN of the task in the state change request.
        public let task: String?

        public init(attachments: [AttachmentStateChange]? = nil, cluster: String? = nil, containers: [ContainerStateChange]? = nil, executionStoppedAt: TimeStamp? = nil, pullStartedAt: TimeStamp? = nil, pullStoppedAt: TimeStamp? = nil, reason: String? = nil, status: String? = nil, task: String? = nil) {
            self.attachments = attachments
            self.cluster = cluster
            self.containers = containers
            self.executionStoppedAt = executionStoppedAt
            self.pullStartedAt = pullStartedAt
            self.pullStoppedAt = pullStoppedAt
            self.reason = reason
            self.status = status
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachments"
            case cluster = "cluster"
            case containers = "containers"
            case executionStoppedAt = "executionStoppedAt"
            case pullStartedAt = "pullStartedAt"
            case pullStoppedAt = "pullStoppedAt"
            case reason = "reason"
            case status = "status"
            case task = "task"
        }
    }

    public struct SubmitTaskStateChangeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "acknowledgment", required: false, type: .string)
        ]

        /// Acknowledgement of the state change.
        public let acknowledgment: String?

        public init(acknowledgment: String? = nil) {
            self.acknowledgment = acknowledgment
        }

        private enum CodingKeys: String, CodingKey {
            case acknowledgment = "acknowledgment"
        }
    }

    public struct SystemControl: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "namespace", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]

        /// The namespaced kernel parameter for which to set a value.
        public let namespace: String?
        /// The value for the namespaced kernel parameter specified in namespace.
        public let value: String?

        public init(namespace: String? = nil, value: String? = nil) {
            self.namespace = namespace
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "namespace"
            case value = "value"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]

        /// One part of a key-value pair that make up a tag. A key is a general label that acts like a category for more specific tag values.
        public let key: String?
        /// The optional part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key).
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try validate(self.value, name:"value", parent: name, max: 256)
            try validate(self.value, name:"value", parent: name, min: 0)
            try validate(self.value, name:"value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]

        /// The Amazon Resource Name (ARN) of the resource to which to add tags. Currently, the supported resources are Amazon ECS capacity providers, tasks, services, task definitions, clusters, and container instances.
        public let resourceArn: String
        /// The tags to add to the resource. A tag is an array of key-value pairs. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct Task: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachments", required: false, type: .list), 
            AWSShapeMember(label: "attributes", required: false, type: .list), 
            AWSShapeMember(label: "availabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "capacityProviderName", required: false, type: .string), 
            AWSShapeMember(label: "clusterArn", required: false, type: .string), 
            AWSShapeMember(label: "connectivity", required: false, type: .enum), 
            AWSShapeMember(label: "connectivityAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "containerInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "containers", required: false, type: .list), 
            AWSShapeMember(label: "cpu", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "desiredStatus", required: false, type: .string), 
            AWSShapeMember(label: "executionStoppedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "group", required: false, type: .string), 
            AWSShapeMember(label: "healthStatus", required: false, type: .enum), 
            AWSShapeMember(label: "inferenceAccelerators", required: false, type: .list), 
            AWSShapeMember(label: "lastStatus", required: false, type: .string), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "memory", required: false, type: .string), 
            AWSShapeMember(label: "overrides", required: false, type: .structure), 
            AWSShapeMember(label: "platformVersion", required: false, type: .string), 
            AWSShapeMember(label: "pullStartedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "pullStoppedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "startedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "startedBy", required: false, type: .string), 
            AWSShapeMember(label: "stopCode", required: false, type: .enum), 
            AWSShapeMember(label: "stoppedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "stoppedReason", required: false, type: .string), 
            AWSShapeMember(label: "stoppingAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskArn", required: false, type: .string), 
            AWSShapeMember(label: "taskDefinitionArn", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long)
        ]

        /// The Elastic Network Adapter associated with the task if the task uses the awsvpc network mode.
        public let attachments: [Attachment]?
        /// The attributes of the task
        public let attributes: [Attribute]?
        /// The availability zone of the task.
        public let availabilityZone: String?
        /// The capacity provider associated with the task.
        public let capacityProviderName: String?
        /// The ARN of the cluster that hosts the task.
        public let clusterArn: String?
        /// The connectivity status of a task.
        public let connectivity: Connectivity?
        /// The Unix timestamp for when the task last went into CONNECTED status.
        public let connectivityAt: TimeStamp?
        /// The ARN of the container instances that host the task.
        public let containerInstanceArn: String?
        /// The containers associated with the task.
        public let containers: [Container]?
        /// The number of CPU units used by the task as expressed in a task definition. It can be expressed as an integer using CPU units, for example 1024. It can also be expressed as a string using vCPUs, for example 1 vCPU or 1 vcpu. String values are converted to an integer indicating the CPU units when the task definition is registered. If you are using the EC2 launch type, this field is optional. Supported values are between 128 CPU units (0.125 vCPUs) and 10240 CPU units (10 vCPUs). If you are using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of supported values for the memory parameter:   256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)   512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)   1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)   2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)   4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)  
        public let cpu: String?
        /// The Unix timestamp for when the task was created (the task entered the PENDING state).
        public let createdAt: TimeStamp?
        /// The desired status of the task. For more information, see Task Lifecycle.
        public let desiredStatus: String?
        /// The Unix timestamp for when the task execution stopped.
        public let executionStoppedAt: TimeStamp?
        /// The name of the task group associated with the task.
        public let group: String?
        /// The health status for the task, which is determined by the health of the essential containers in the task. If all essential containers in the task are reporting as HEALTHY, then the task status also reports as HEALTHY. If any essential containers in the task are reporting as UNHEALTHY or UNKNOWN, then the task status also reports as UNHEALTHY or UNKNOWN, accordingly.  The Amazon ECS container agent does not monitor or report on Docker health checks that are embedded in a container image (such as those specified in a parent image or from the image's Dockerfile) and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image. 
        public let healthStatus: HealthStatus?
        /// The Elastic Inference accelerator associated with the task.
        public let inferenceAccelerators: [InferenceAccelerator]?
        /// The last known status of the task. For more information, see Task Lifecycle.
        public let lastStatus: String?
        /// The launch type on which your task is running. For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide.
        public let launchType: LaunchType?
        /// The amount of memory (in MiB) used by the task as expressed in a task definition. It can be expressed as an integer using MiB, for example 1024. It can also be expressed as a string using GB, for example 1GB or 1 GB. String values are converted to an integer indicating the MiB when the task definition is registered. If you are using the EC2 launch type, this field is optional. If you are using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of supported values for the cpu parameter:   512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)   1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)   2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)   Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)   Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)  
        public let memory: String?
        /// One or more container overrides.
        public let overrides: TaskOverride?
        /// The platform version on which your task is running. A platform version is only specified for tasks using the Fargate launch type. If one is not specified, the LATEST platform version is used by default. For more information, see AWS Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// The Unix timestamp for when the container image pull began.
        public let pullStartedAt: TimeStamp?
        /// The Unix timestamp for when the container image pull completed.
        public let pullStoppedAt: TimeStamp?
        /// The Unix timestamp for when the task started (the task transitioned from the PENDING state to the RUNNING state).
        public let startedAt: TimeStamp?
        /// The tag specified when a task is started. If the task is started by an Amazon ECS service, then the startedBy parameter contains the deployment ID of the service that starts it.
        public let startedBy: String?
        /// The stop code indicating why a task was stopped. The stoppedReason may contain additional details.
        public let stopCode: TaskStopCode?
        /// The Unix timestamp for when the task was stopped (the task transitioned from the RUNNING state to the STOPPED state).
        public let stoppedAt: TimeStamp?
        /// The reason that the task was stopped.
        public let stoppedReason: String?
        /// The Unix timestamp for when the task stops (transitions from the RUNNING state to STOPPED).
        public let stoppingAt: TimeStamp?
        /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the task.
        public let taskArn: String?
        /// The ARN of the task definition that creates the task.
        public let taskDefinitionArn: String?
        /// The version counter for the task. Every time a task experiences a change that triggers a CloudWatch event, the version counter is incremented. If you are replicating your Amazon ECS task state with CloudWatch Events, you can compare the version of a task reported by the Amazon ECS API actions with the version reported in CloudWatch Events for the task (inside the detail object) to verify that the version in your event stream is current.
        public let version: Int64?

        public init(attachments: [Attachment]? = nil, attributes: [Attribute]? = nil, availabilityZone: String? = nil, capacityProviderName: String? = nil, clusterArn: String? = nil, connectivity: Connectivity? = nil, connectivityAt: TimeStamp? = nil, containerInstanceArn: String? = nil, containers: [Container]? = nil, cpu: String? = nil, createdAt: TimeStamp? = nil, desiredStatus: String? = nil, executionStoppedAt: TimeStamp? = nil, group: String? = nil, healthStatus: HealthStatus? = nil, inferenceAccelerators: [InferenceAccelerator]? = nil, lastStatus: String? = nil, launchType: LaunchType? = nil, memory: String? = nil, overrides: TaskOverride? = nil, platformVersion: String? = nil, pullStartedAt: TimeStamp? = nil, pullStoppedAt: TimeStamp? = nil, startedAt: TimeStamp? = nil, startedBy: String? = nil, stopCode: TaskStopCode? = nil, stoppedAt: TimeStamp? = nil, stoppedReason: String? = nil, stoppingAt: TimeStamp? = nil, tags: [Tag]? = nil, taskArn: String? = nil, taskDefinitionArn: String? = nil, version: Int64? = nil) {
            self.attachments = attachments
            self.attributes = attributes
            self.availabilityZone = availabilityZone
            self.capacityProviderName = capacityProviderName
            self.clusterArn = clusterArn
            self.connectivity = connectivity
            self.connectivityAt = connectivityAt
            self.containerInstanceArn = containerInstanceArn
            self.containers = containers
            self.cpu = cpu
            self.createdAt = createdAt
            self.desiredStatus = desiredStatus
            self.executionStoppedAt = executionStoppedAt
            self.group = group
            self.healthStatus = healthStatus
            self.inferenceAccelerators = inferenceAccelerators
            self.lastStatus = lastStatus
            self.launchType = launchType
            self.memory = memory
            self.overrides = overrides
            self.platformVersion = platformVersion
            self.pullStartedAt = pullStartedAt
            self.pullStoppedAt = pullStoppedAt
            self.startedAt = startedAt
            self.startedBy = startedBy
            self.stopCode = stopCode
            self.stoppedAt = stoppedAt
            self.stoppedReason = stoppedReason
            self.stoppingAt = stoppingAt
            self.tags = tags
            self.taskArn = taskArn
            self.taskDefinitionArn = taskDefinitionArn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachments"
            case attributes = "attributes"
            case availabilityZone = "availabilityZone"
            case capacityProviderName = "capacityProviderName"
            case clusterArn = "clusterArn"
            case connectivity = "connectivity"
            case connectivityAt = "connectivityAt"
            case containerInstanceArn = "containerInstanceArn"
            case containers = "containers"
            case cpu = "cpu"
            case createdAt = "createdAt"
            case desiredStatus = "desiredStatus"
            case executionStoppedAt = "executionStoppedAt"
            case group = "group"
            case healthStatus = "healthStatus"
            case inferenceAccelerators = "inferenceAccelerators"
            case lastStatus = "lastStatus"
            case launchType = "launchType"
            case memory = "memory"
            case overrides = "overrides"
            case platformVersion = "platformVersion"
            case pullStartedAt = "pullStartedAt"
            case pullStoppedAt = "pullStoppedAt"
            case startedAt = "startedAt"
            case startedBy = "startedBy"
            case stopCode = "stopCode"
            case stoppedAt = "stoppedAt"
            case stoppedReason = "stoppedReason"
            case stoppingAt = "stoppingAt"
            case tags = "tags"
            case taskArn = "taskArn"
            case taskDefinitionArn = "taskDefinitionArn"
            case version = "version"
        }
    }

    public struct TaskDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "compatibilities", required: false, type: .list), 
            AWSShapeMember(label: "containerDefinitions", required: false, type: .list), 
            AWSShapeMember(label: "cpu", required: false, type: .string), 
            AWSShapeMember(label: "executionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "family", required: false, type: .string), 
            AWSShapeMember(label: "inferenceAccelerators", required: false, type: .list), 
            AWSShapeMember(label: "ipcMode", required: false, type: .enum), 
            AWSShapeMember(label: "memory", required: false, type: .string), 
            AWSShapeMember(label: "networkMode", required: false, type: .enum), 
            AWSShapeMember(label: "pidMode", required: false, type: .enum), 
            AWSShapeMember(label: "placementConstraints", required: false, type: .list), 
            AWSShapeMember(label: "proxyConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "requiresAttributes", required: false, type: .list), 
            AWSShapeMember(label: "requiresCompatibilities", required: false, type: .list), 
            AWSShapeMember(label: "revision", required: false, type: .integer), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "taskDefinitionArn", required: false, type: .string), 
            AWSShapeMember(label: "taskRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "volumes", required: false, type: .list)
        ]

        /// The launch type to use with your task. For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide.
        public let compatibilities: [Compatibility]?
        /// A list of container definitions in JSON format that describe the different containers that make up your task. For more information about container definition parameters and defaults, see Amazon ECS Task Definitions in the Amazon Elastic Container Service Developer Guide.
        public let containerDefinitions: [ContainerDefinition]?
        /// The number of cpu units used by the task. If you are using the EC2 launch type, this field is optional and any value can be used. If you are using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of valid values for the memory parameter:   256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)   512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)   1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)   2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)   4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)  
        public let cpu: String?
        /// The Amazon Resource Name (ARN) of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
        public let executionRoleArn: String?
        /// The name of a family that this task definition is registered to. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. A family groups multiple versions of a task definition. Amazon ECS gives the first task definition that you registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers to each task definition that you add.
        public let family: String?
        /// The Elastic Inference accelerator associated with the task.
        public let inferenceAccelerators: [InferenceAccelerator]?
        /// The IPC resource namespace to use for the containers in the task. The valid values are host, task, or none. If host is specified, then all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same IPC resources. If none is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see IPC settings in the Docker run reference. If the host IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see Docker security. If you are setting namespaced kernel parameters using systemControls for the containers in the task, the following will apply to your IPC resource namespace. For more information, see System Controls in the Amazon Elastic Container Service Developer Guide.   For tasks that use the host IPC mode, IPC namespace related systemControls are not supported.   For tasks that use the task IPC mode, IPC namespace related systemControls will apply to all containers within a task.    This parameter is not supported for Windows containers or tasks using the Fargate launch type. 
        public let ipcMode: IpcMode?
        /// The amount (in MiB) of memory used by the task. If using the EC2 launch type, this field is optional and any value can be used. If a task-level memory value is specified then the container-level memory value is optional. If using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of valid values for the cpu parameter:   512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)   1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)   2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)   Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)   Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)  
        public let memory: String?
        /// The Docker networking mode to use for the containers in the task. The valid values are none, bridge, awsvpc, and host. The default Docker network mode is bridge. If you are using the Fargate launch type, the awsvpc network mode is required. If you are using the EC2 launch type, any network mode can be used. If the network mode is set to none, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The host and awsvpc network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the bridge mode. With the host and awsvpc network modes, exposed container ports are mapped directly to the corresponding host port (for the host network mode) or the attached elastic network interface port (for the awsvpc network mode), so you cannot take advantage of dynamic host port mappings.  If the network mode is awsvpc, the task is allocated an elastic network interface, and you must specify a NetworkConfiguration value when you create a service or run a task with the task definition. For more information, see Task Networking in the Amazon Elastic Container Service Developer Guide.  Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the ecs-init package, or AWS Fargate infrastructure support the awsvpc network mode.   If the network mode is host, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used. Docker for Windows uses different network modes than Docker for Linux. When you register a task definition with Windows containers, you must not specify a network mode. If you use the console to register a task definition with Windows containers, you must choose the &lt;default&gt; network mode object.  For more information, see Network settings in the Docker run reference.
        public let networkMode: NetworkMode?
        /// The process namespace to use for the containers in the task. The valid values are host or task. If host is specified, then all containers within the tasks that specified the host PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace. For more information, see PID settings in the Docker run reference. If the host PID mode is used, be aware that there is a heightened risk of undesired process namespace expose. For more information, see Docker security.  This parameter is not supported for Windows containers or tasks using the Fargate launch type. 
        public let pidMode: PidMode?
        /// An array of placement constraint objects to use for tasks. This field is not valid if you are using the Fargate launch type for your task.
        public let placementConstraints: [TaskDefinitionPlacementConstraint]?
        /// The configuration details for the App Mesh proxy. Your Amazon ECS container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ecs-init package to enable a proxy configuration. If your container instances are launched from the Amazon ECS-optimized AMI version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see Amazon ECS-optimized Linux AMI in the Amazon Elastic Container Service Developer Guide.
        public let proxyConfiguration: ProxyConfiguration?
        /// The container instance attributes required by your task. This field is not valid if you are using the Fargate launch type for your task.
        public let requiresAttributes: [Attribute]?
        /// The launch type the task requires. If no value is specified, it will default to EC2. Valid values include EC2 and FARGATE.
        public let requiresCompatibilities: [Compatibility]?
        /// The revision of the task in a particular family. The revision is a version number of a task definition in a family. When you register a task definition for the first time, the revision is 1. Each time that you register a new revision of a task definition in the same family, the revision value always increases by one, even if you have deregistered previous revisions in this family.
        public let revision: Int?
        /// The status of the task definition.
        public let status: TaskDefinitionStatus?
        /// The full Amazon Resource Name (ARN) of the task definition.
        public let taskDefinitionArn: String?
        /// The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf. For more information, see Amazon ECS Task Role in the Amazon Elastic Container Service Developer Guide. IAM roles for tasks on Windows require that the -EnableTaskIAMRole option is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some configuration code in order to take advantage of the feature. For more information, see Windows IAM Roles for Tasks in the Amazon Elastic Container Service Developer Guide.
        public let taskRoleArn: String?
        /// The list of volume definitions for the task. If your tasks are using the Fargate launch type, the host and sourcePath parameters are not supported. For more information about volume definition parameters and defaults, see Amazon ECS Task Definitions in the Amazon Elastic Container Service Developer Guide.
        public let volumes: [Volume]?

        public init(compatibilities: [Compatibility]? = nil, containerDefinitions: [ContainerDefinition]? = nil, cpu: String? = nil, executionRoleArn: String? = nil, family: String? = nil, inferenceAccelerators: [InferenceAccelerator]? = nil, ipcMode: IpcMode? = nil, memory: String? = nil, networkMode: NetworkMode? = nil, pidMode: PidMode? = nil, placementConstraints: [TaskDefinitionPlacementConstraint]? = nil, proxyConfiguration: ProxyConfiguration? = nil, requiresAttributes: [Attribute]? = nil, requiresCompatibilities: [Compatibility]? = nil, revision: Int? = nil, status: TaskDefinitionStatus? = nil, taskDefinitionArn: String? = nil, taskRoleArn: String? = nil, volumes: [Volume]? = nil) {
            self.compatibilities = compatibilities
            self.containerDefinitions = containerDefinitions
            self.cpu = cpu
            self.executionRoleArn = executionRoleArn
            self.family = family
            self.inferenceAccelerators = inferenceAccelerators
            self.ipcMode = ipcMode
            self.memory = memory
            self.networkMode = networkMode
            self.pidMode = pidMode
            self.placementConstraints = placementConstraints
            self.proxyConfiguration = proxyConfiguration
            self.requiresAttributes = requiresAttributes
            self.requiresCompatibilities = requiresCompatibilities
            self.revision = revision
            self.status = status
            self.taskDefinitionArn = taskDefinitionArn
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case compatibilities = "compatibilities"
            case containerDefinitions = "containerDefinitions"
            case cpu = "cpu"
            case executionRoleArn = "executionRoleArn"
            case family = "family"
            case inferenceAccelerators = "inferenceAccelerators"
            case ipcMode = "ipcMode"
            case memory = "memory"
            case networkMode = "networkMode"
            case pidMode = "pidMode"
            case placementConstraints = "placementConstraints"
            case proxyConfiguration = "proxyConfiguration"
            case requiresAttributes = "requiresAttributes"
            case requiresCompatibilities = "requiresCompatibilities"
            case revision = "revision"
            case status = "status"
            case taskDefinitionArn = "taskDefinitionArn"
            case taskRoleArn = "taskRoleArn"
            case volumes = "volumes"
        }
    }

    public struct TaskDefinitionPlacementConstraint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expression", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum)
        ]

        /// A cluster query language expression to apply to the constraint. For more information, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
        public let expression: String?
        /// The type of constraint. The MemberOf constraint restricts selection to be from a group of valid candidates.
        public let `type`: TaskDefinitionPlacementConstraintType?

        public init(expression: String? = nil, type: TaskDefinitionPlacementConstraintType? = nil) {
            self.expression = expression
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "expression"
            case `type` = "type"
        }
    }

    public struct TaskOverride: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerOverrides", required: false, type: .list), 
            AWSShapeMember(label: "cpu", required: false, type: .string), 
            AWSShapeMember(label: "executionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "inferenceAcceleratorOverrides", required: false, type: .list), 
            AWSShapeMember(label: "memory", required: false, type: .string), 
            AWSShapeMember(label: "taskRoleArn", required: false, type: .string)
        ]

        /// One or more container overrides sent to a task.
        public let containerOverrides: [ContainerOverride]?
        /// The cpu override for the task.
        public let cpu: String?
        /// The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
        public let executionRoleArn: String?
        /// The Elastic Inference accelerator override for the task.
        public let inferenceAcceleratorOverrides: [InferenceAcceleratorOverride]?
        /// The memory override for the task.
        public let memory: String?
        /// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
        public let taskRoleArn: String?

        public init(containerOverrides: [ContainerOverride]? = nil, cpu: String? = nil, executionRoleArn: String? = nil, inferenceAcceleratorOverrides: [InferenceAcceleratorOverride]? = nil, memory: String? = nil, taskRoleArn: String? = nil) {
            self.containerOverrides = containerOverrides
            self.cpu = cpu
            self.executionRoleArn = executionRoleArn
            self.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides
            self.memory = memory
            self.taskRoleArn = taskRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerOverrides = "containerOverrides"
            case cpu = "cpu"
            case executionRoleArn = "executionRoleArn"
            case inferenceAcceleratorOverrides = "inferenceAcceleratorOverrides"
            case memory = "memory"
            case taskRoleArn = "taskRoleArn"
        }
    }

    public struct TaskSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "clusterArn", required: false, type: .string), 
            AWSShapeMember(label: "computedDesiredCount", required: false, type: .integer), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "externalId", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "launchType", required: false, type: .enum), 
            AWSShapeMember(label: "loadBalancers", required: false, type: .list), 
            AWSShapeMember(label: "networkConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "pendingCount", required: false, type: .integer), 
            AWSShapeMember(label: "platformVersion", required: false, type: .string), 
            AWSShapeMember(label: "runningCount", required: false, type: .integer), 
            AWSShapeMember(label: "scale", required: false, type: .structure), 
            AWSShapeMember(label: "serviceArn", required: false, type: .string), 
            AWSShapeMember(label: "serviceRegistries", required: false, type: .list), 
            AWSShapeMember(label: "stabilityStatus", required: false, type: .enum), 
            AWSShapeMember(label: "stabilityStatusAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "startedBy", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "taskDefinition", required: false, type: .string), 
            AWSShapeMember(label: "taskSetArn", required: false, type: .string), 
            AWSShapeMember(label: "updatedAt", required: false, type: .timestamp)
        ]

        /// The capacity provider strategy associated with the task set.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set exists in.
        public let clusterArn: String?
        /// The computed desired count for the task set. This is calculated by multiplying the service's desiredCount by the task set's scale percentage. The result is always rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.
        public let computedDesiredCount: Int?
        /// The Unix timestamp for when the task set was created.
        public let createdAt: TimeStamp?
        /// The external ID associated with the task set. If a task set is created by an AWS CodeDeploy deployment, the externalId parameter contains the AWS CodeDeploy deployment ID. If a task set is created for an external deployment and is associated with a service discovery registry, the externalId parameter contains the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute.
        public let externalId: String?
        /// The ID of the task set.
        public let id: String?
        /// The launch type the tasks in the task set are using. For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide.
        public let launchType: LaunchType?
        /// Details on a load balancer that is used with a task set.
        public let loadBalancers: [LoadBalancer]?
        /// The network configuration for the task set.
        public let networkConfiguration: NetworkConfiguration?
        /// The number of tasks in the task set that are in the PENDING status during a deployment. A task in the PENDING state is preparing to enter the RUNNING state. A task set enters the PENDING status when it launches for the first time or when it is restarted after being in the STOPPED state.
        public let pendingCount: Int?
        /// The platform version on which the tasks in the task set are running. A platform version is only specified for tasks using the Fargate launch type. If one is not specified, the LATEST platform version is used by default. For more information, see AWS Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// The number of tasks in the task set that are in the RUNNING status during a deployment. A task in the RUNNING state is running and ready for use.
        public let runningCount: Int?
        /// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
        public let scale: Scale?
        /// The Amazon Resource Name (ARN) of the service the task set exists in.
        public let serviceArn: String?
        /// The details of the service discovery registries to assign to this task set. For more information, see Service Discovery.
        public let serviceRegistries: [ServiceRegistry]?
        /// The stability status, which indicates whether the task set has reached a steady state. If the following conditions are met, the task set will be in STEADY_STATE:   The task runningCount is equal to the computedDesiredCount.   The pendingCount is 0.   There are no tasks running on container instances in the DRAINING status.   All tasks are reporting a healthy status from the load balancers, service discovery, and container health checks.   If any of those conditions are not met, the stability status returns STABILIZING.
        public let stabilityStatus: StabilityStatus?
        /// The Unix timestamp for when the task set stability status was retrieved.
        public let stabilityStatusAt: TimeStamp?
        /// The tag specified when a task set is started. If the task set is created by an AWS CodeDeploy deployment, the startedBy parameter is CODE_DEPLOY. For a task set created for an external deployment, the startedBy field isn't used.
        public let startedBy: String?
        /// The status of the task set. The following describes each state:  PRIMARY  The task set is serving production traffic.  ACTIVE  The task set is not serving production traffic.  DRAINING  The tasks in the task set are being stopped and their corresponding targets are being deregistered from their target group.  
        public let status: String?
        /// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.  
        public let tags: [Tag]?
        /// The task definition the task set is using.
        public let taskDefinition: String?
        /// The Amazon Resource Name (ARN) of the task set.
        public let taskSetArn: String?
        /// The Unix timestamp for when the task set was last updated.
        public let updatedAt: TimeStamp?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clusterArn: String? = nil, computedDesiredCount: Int? = nil, createdAt: TimeStamp? = nil, externalId: String? = nil, id: String? = nil, launchType: LaunchType? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, pendingCount: Int? = nil, platformVersion: String? = nil, runningCount: Int? = nil, scale: Scale? = nil, serviceArn: String? = nil, serviceRegistries: [ServiceRegistry]? = nil, stabilityStatus: StabilityStatus? = nil, stabilityStatusAt: TimeStamp? = nil, startedBy: String? = nil, status: String? = nil, tags: [Tag]? = nil, taskDefinition: String? = nil, taskSetArn: String? = nil, updatedAt: TimeStamp? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clusterArn = clusterArn
            self.computedDesiredCount = computedDesiredCount
            self.createdAt = createdAt
            self.externalId = externalId
            self.id = id
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.platformVersion = platformVersion
            self.runningCount = runningCount
            self.scale = scale
            self.serviceArn = serviceArn
            self.serviceRegistries = serviceRegistries
            self.stabilityStatus = stabilityStatus
            self.stabilityStatusAt = stabilityStatusAt
            self.startedBy = startedBy
            self.status = status
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.taskSetArn = taskSetArn
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clusterArn = "clusterArn"
            case computedDesiredCount = "computedDesiredCount"
            case createdAt = "createdAt"
            case externalId = "externalId"
            case id = "id"
            case launchType = "launchType"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case pendingCount = "pendingCount"
            case platformVersion = "platformVersion"
            case runningCount = "runningCount"
            case scale = "scale"
            case serviceArn = "serviceArn"
            case serviceRegistries = "serviceRegistries"
            case stabilityStatus = "stabilityStatus"
            case stabilityStatusAt = "stabilityStatusAt"
            case startedBy = "startedBy"
            case status = "status"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
            case taskSetArn = "taskSetArn"
            case updatedAt = "updatedAt"
        }
    }

    public struct Tmpfs: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerPath", required: true, type: .string), 
            AWSShapeMember(label: "mountOptions", required: false, type: .list), 
            AWSShapeMember(label: "size", required: true, type: .integer)
        ]

        /// The absolute file path where the tmpfs volume is to be mounted.
        public let containerPath: String
        /// The list of tmpfs volume mount options. Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol" 
        public let mountOptions: [String]?
        /// The size (in MiB) of the tmpfs volume.
        public let size: Int

        public init(containerPath: String, mountOptions: [String]? = nil, size: Int) {
            self.containerPath = containerPath
            self.mountOptions = mountOptions
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case mountOptions = "mountOptions"
            case size = "size"
        }
    }

    public struct Ulimit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "hardLimit", required: true, type: .integer), 
            AWSShapeMember(label: "name", required: true, type: .enum), 
            AWSShapeMember(label: "softLimit", required: true, type: .integer)
        ]

        /// The hard limit for the ulimit type.
        public let hardLimit: Int
        /// The type of the ulimit.
        public let name: UlimitName
        /// The soft limit for the ulimit type.
        public let softLimit: Int

        public init(hardLimit: Int, name: UlimitName, softLimit: Int) {
            self.hardLimit = hardLimit
            self.name = name
            self.softLimit = softLimit
        }

        private enum CodingKeys: String, CodingKey {
            case hardLimit = "hardLimit"
            case name = "name"
            case softLimit = "softLimit"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", required: true, type: .list)
        ]

        /// The Amazon Resource Name (ARN) of the resource from which to delete tags. Currently, the supported resources are Amazon ECS capacity providers, tasks, services, task definitions, clusters, and container instances.
        public let resourceArn: String
        /// The keys of the tags to be removed.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateClusterSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: true, type: .string), 
            AWSShapeMember(label: "settings", required: true, type: .list)
        ]

        /// The name of the cluster to modify the settings for.
        public let cluster: String
        /// The setting to use by default for a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
        public let settings: [ClusterSetting]

        public init(cluster: String, settings: [ClusterSetting]) {
            self.cluster = cluster
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case settings = "settings"
        }
    }

    public struct UpdateClusterSettingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .structure)
        ]

        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct UpdateContainerAgentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerInstance", required: true, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is running on. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The container instance ID or full ARN entries for the container instance on which you would like to update the Amazon ECS container agent.
        public let containerInstance: String

        public init(cluster: String? = nil, containerInstance: String) {
            self.cluster = cluster
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstance = "containerInstance"
        }
    }

    public struct UpdateContainerAgentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerInstance", required: false, type: .structure)
        ]

        /// The container instance for which the container agent was updated.
        public let containerInstance: ContainerInstance?

        public init(containerInstance: ContainerInstance? = nil) {
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstance = "containerInstance"
        }
    }

    public struct UpdateContainerInstancesStateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "containerInstances", required: true, type: .list), 
            AWSShapeMember(label: "status", required: true, type: .enum)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to update. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// A list of container instance IDs or full ARN entries.
        public let containerInstances: [String]
        /// The container instance state with which to update the container instance. The only valid values for this action are ACTIVE and DRAINING. A container instance can only be updated to DRAINING status once it has reached an ACTIVE state. If a container instance is in REGISTERING, DEREGISTERING, or REGISTRATION_FAILED state you can describe the container instance but will be unable to update the container instance state.
        public let status: ContainerInstanceStatus

        public init(cluster: String? = nil, containerInstances: [String], status: ContainerInstanceStatus) {
            self.cluster = cluster
            self.containerInstances = containerInstances
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstances = "containerInstances"
            case status = "status"
        }
    }

    public struct UpdateContainerInstancesStateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "containerInstances", required: false, type: .list), 
            AWSShapeMember(label: "failures", required: false, type: .list)
        ]

        /// The list of container instances.
        public let containerInstances: [ContainerInstance]?
        /// Any failures associated with the call.
        public let failures: [Failure]?

        public init(containerInstances: [ContainerInstance]? = nil, failures: [Failure]? = nil) {
            self.containerInstances = containerInstances
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstances = "containerInstances"
            case failures = "failures"
        }
    }

    public struct UpdateServicePrimaryTaskSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: true, type: .string), 
            AWSShapeMember(label: "primaryTaskSet", required: true, type: .string), 
            AWSShapeMember(label: "service", required: true, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task set exists in.
        public let cluster: String
        /// The short name or full Amazon Resource Name (ARN) of the task set to set as the primary task set in the deployment.
        public let primaryTaskSet: String
        /// The short name or full Amazon Resource Name (ARN) of the service that the task set exists in.
        public let service: String

        public init(cluster: String, primaryTaskSet: String, service: String) {
            self.cluster = cluster
            self.primaryTaskSet = primaryTaskSet
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case primaryTaskSet = "primaryTaskSet"
            case service = "service"
        }
    }

    public struct UpdateServicePrimaryTaskSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskSet", required: false, type: .structure)
        ]

        public let taskSet: TaskSet?

        public init(taskSet: TaskSet? = nil) {
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case taskSet = "taskSet"
        }
    }

    public struct UpdateServiceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capacityProviderStrategy", required: false, type: .list), 
            AWSShapeMember(label: "cluster", required: false, type: .string), 
            AWSShapeMember(label: "deploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "desiredCount", required: false, type: .integer), 
            AWSShapeMember(label: "forceNewDeployment", required: false, type: .boolean), 
            AWSShapeMember(label: "healthCheckGracePeriodSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "networkConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "placementConstraints", required: false, type: .list), 
            AWSShapeMember(label: "placementStrategy", required: false, type: .list), 
            AWSShapeMember(label: "platformVersion", required: false, type: .string), 
            AWSShapeMember(label: "service", required: true, type: .string), 
            AWSShapeMember(label: "taskDefinition", required: false, type: .string)
        ]

        /// The capacity provider strategy to update the service to use. If the service is using the default capacity provider strategy for the cluster, the service can be updated to use one or more capacity providers as opposed to the default capacity provider strategy. However, when a service is using a capacity provider strategy that is not the default capacity provider strategy, the service cannot be updated to use the cluster's default capacity provider strategy. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a AWS Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. The PutClusterCapacityProviders API operation is used to update the list of available capacity providers for a cluster after the cluster is created. 
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The short name or full Amazon Resource Name (ARN) of the cluster that your service is running on. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
        public let deploymentConfiguration: DeploymentConfiguration?
        /// The number of instantiations of the task to place and keep running in your service.
        public let desiredCount: Int?
        /// Whether to force a new deployment of the service. Deployments are not forced by default. You can use this option to trigger a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (my_image:latest) or to roll Fargate tasks onto a newer platform version.
        public let forceNewDeployment: Bool?
        /// The period of time, in seconds, that the Amazon ECS service scheduler should ignore unhealthy Elastic Load Balancing target health checks after a task has first started. This is only valid if your service is configured to use a load balancer. If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds. During that time, the Amazon ECS service scheduler ignores the Elastic Load Balancing health check status. This grace period can prevent the ECS service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.
        public let healthCheckGracePeriodSeconds: Int?
        public let networkConfiguration: NetworkConfiguration?
        /// An array of task placement constraint objects to update the service to use. If no value is specified, the existing placement constraints for the service will remain unchanged. If this value is specified, it will override any existing placement constraints defined for the service. To remove all existing placement constraints, specify an empty array. You can specify a maximum of 10 constraints per task (this limit includes constraints in the task definition and those specified at runtime).
        public let placementConstraints: [PlacementConstraint]?
        /// The task placement strategy objects to update the service to use. If no value is specified, the existing placement strategy for the service will remain unchanged. If this value is specified, it will override the existing placement strategy defined for the service. To remove an existing placement strategy, specify an empty object. You can specify a maximum of five strategy rules per service.
        public let placementStrategy: [PlacementStrategy]?
        /// The platform version on which your tasks in the service are running. A platform version is only specified for tasks using the Fargate launch type. If a platform version is not specified, the LATEST platform version is used by default. For more information, see AWS Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// The name of the service to update.
        public let service: String
        /// The family and revision (family:revision) or full ARN of the task definition to run in your service. If a revision is not specified, the latest ACTIVE revision is used. If you modify the task definition with UpdateService, Amazon ECS spawns a task with the new version of the task definition and then stops an old task after the new version is running.
        public let taskDefinition: String?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, cluster: String? = nil, deploymentConfiguration: DeploymentConfiguration? = nil, desiredCount: Int? = nil, forceNewDeployment: Bool? = nil, healthCheckGracePeriodSeconds: Int? = nil, networkConfiguration: NetworkConfiguration? = nil, placementConstraints: [PlacementConstraint]? = nil, placementStrategy: [PlacementStrategy]? = nil, platformVersion: String? = nil, service: String, taskDefinition: String? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.cluster = cluster
            self.deploymentConfiguration = deploymentConfiguration
            self.desiredCount = desiredCount
            self.forceNewDeployment = forceNewDeployment
            self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
            self.networkConfiguration = networkConfiguration
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.service = service
            self.taskDefinition = taskDefinition
        }

        public func validate(name: String) throws {
            try self.capacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).capacityProviderStrategy[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case cluster = "cluster"
            case deploymentConfiguration = "deploymentConfiguration"
            case desiredCount = "desiredCount"
            case forceNewDeployment = "forceNewDeployment"
            case healthCheckGracePeriodSeconds = "healthCheckGracePeriodSeconds"
            case networkConfiguration = "networkConfiguration"
            case placementConstraints = "placementConstraints"
            case placementStrategy = "placementStrategy"
            case platformVersion = "platformVersion"
            case service = "service"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct UpdateServiceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "service", required: false, type: .structure)
        ]

        /// The full description of your service following the update call.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "service"
        }
    }

    public struct UpdateTaskSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cluster", required: true, type: .string), 
            AWSShapeMember(label: "scale", required: true, type: .structure), 
            AWSShapeMember(label: "service", required: true, type: .string), 
            AWSShapeMember(label: "taskSet", required: true, type: .string)
        ]

        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task set exists in.
        public let cluster: String
        public let scale: Scale
        /// The short name or full Amazon Resource Name (ARN) of the service that the task set exists in.
        public let service: String
        /// The short name or full Amazon Resource Name (ARN) of the task set to update.
        public let taskSet: String

        public init(cluster: String, scale: Scale, service: String, taskSet: String) {
            self.cluster = cluster
            self.scale = scale
            self.service = service
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case scale = "scale"
            case service = "service"
            case taskSet = "taskSet"
        }
    }

    public struct UpdateTaskSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskSet", required: false, type: .structure)
        ]

        public let taskSet: TaskSet?

        public init(taskSet: TaskSet? = nil) {
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case taskSet = "taskSet"
        }
    }

    public struct VersionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentHash", required: false, type: .string), 
            AWSShapeMember(label: "agentVersion", required: false, type: .string), 
            AWSShapeMember(label: "dockerVersion", required: false, type: .string)
        ]

        /// The Git commit hash for the Amazon ECS container agent build on the amazon-ecs-agent  GitHub repository.
        public let agentHash: String?
        /// The version number of the Amazon ECS container agent.
        public let agentVersion: String?
        /// The Docker version running on the container instance.
        public let dockerVersion: String?

        public init(agentHash: String? = nil, agentVersion: String? = nil, dockerVersion: String? = nil) {
            self.agentHash = agentHash
            self.agentVersion = agentVersion
            self.dockerVersion = dockerVersion
        }

        private enum CodingKeys: String, CodingKey {
            case agentHash = "agentHash"
            case agentVersion = "agentVersion"
            case dockerVersion = "dockerVersion"
        }
    }

    public struct Volume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dockerVolumeConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "efsVolumeConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "host", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]

        /// This parameter is specified when you are using Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the local driver. To use bind mounts, specify the host parameter instead.
        public let dockerVolumeConfiguration: DockerVolumeConfiguration?
        /// This parameter is specified when you are using an Amazon Elastic File System (Amazon EFS) file storage. Amazon EFS file systems are only supported when you are using the EC2 launch type.   EFSVolumeConfiguration remains in preview and is a Beta Service as defined by and subject to the Beta Service Participation Service Terms located at https://aws.amazon.com/service-terms ("Beta Terms"). These Beta Terms apply to your participation in this preview of EFSVolumeConfiguration. 
        public let efsVolumeConfiguration: EFSVolumeConfiguration?
        /// This parameter is specified when you are using bind mount host volumes. Bind mount host volumes are supported when you are using either the EC2 or Fargate launch types. The contents of the host parameter determine whether your bind mount host volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data is not guaranteed to persist after the containers associated with it stop running. Windows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers cannot mount directories on a different drive, and mount point cannot be across drives. For example, you can mount C:\my\path:C:\my\path and D:\:D:\, but not D:\my\path:C:\my\path or D:\:C:\my\path.
        public let host: HostVolumeProperties?
        /// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed. This name is referenced in the sourceVolume parameter of container definition mountPoints.
        public let name: String?

        public init(dockerVolumeConfiguration: DockerVolumeConfiguration? = nil, efsVolumeConfiguration: EFSVolumeConfiguration? = nil, host: HostVolumeProperties? = nil, name: String? = nil) {
            self.dockerVolumeConfiguration = dockerVolumeConfiguration
            self.efsVolumeConfiguration = efsVolumeConfiguration
            self.host = host
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case dockerVolumeConfiguration = "dockerVolumeConfiguration"
            case efsVolumeConfiguration = "efsVolumeConfiguration"
            case host = "host"
            case name = "name"
        }
    }

    public struct VolumeFrom: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "readOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "sourceContainer", required: false, type: .string)
        ]

        /// If this value is true, the container has read-only access to the volume. If this value is false, then the container can write to the volume. The default value is false.
        public let readOnly: Bool?
        /// The name of another container within the same task definition from which to mount volumes.
        public let sourceContainer: String?

        public init(readOnly: Bool? = nil, sourceContainer: String? = nil) {
            self.readOnly = readOnly
            self.sourceContainer = sourceContainer
        }

        private enum CodingKeys: String, CodingKey {
            case readOnly = "readOnly"
            case sourceContainer = "sourceContainer"
        }
    }
}
